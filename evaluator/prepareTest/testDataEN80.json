[
    {
        "problem_id": "000000001",
        "complexity_level": 0,
        "image": "imgs/000000001/000000001.png",
        "instruction_layout": "The page layout is a responsive grid, featuring a top navigation bar and multiple card components. The navigation bar has a dark blue background (#003366) and includes three links: 'Home', 'About', 'Contact'. Each link is a button, using Flexbox layout with appropriate spacing between buttons. The central content area is a grid layout, containing three cards, each displaying a title, description, and a button, evenly distributed across the screen width. Each card shows a shadow effect when hovered over. The bottom copyright information is located at the bottom of the page, in gray (#777777), with a font size of 12px, centered.",
        "instruction_requirement": "The page includes a top navigation bar, multiple card components in the central content area, and copyright information at the bottom. The navigation bar should contain three links: 'Home', 'About', 'Contact'. The central area should display three cards, each containing a title, description, and button, with responsive design. The copyright information is located at the bottom of the page.",
        "style": "html {font-size: 16px; background-color: white; color: #444444;}\nnav { background-color: #003366; padding: 15px; display: flex; justify-content: center;}\nnav a { color: white; margin: 0 20px; text-decoration: none; font-size: 18px;}\nnav a:hover { text-decoration: underline; }\n.container { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 20px; padding: 20px; }\n.card { background-color: #f9f9f9; border: 1px solid #ddd; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); transition: box-shadow 0.3s; padding: 15px; text-align: center; }\n.card:hover { box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); }\n.footer { text-align: center; font-size: 12px; color: #777777; margin-top: 20px; }",
        "file_type": "js",
        "component": "import React from 'react';\n\nconst Card = ({ title, description }) => {\n  return (\n    <div className=\"card\">\n      <h2>{title}</h2>\n      <p>{description}</p>\n      <button>Learn More</button>\n    </div>\n  );\n};\n\nconst App = () => {\n  const cards = [\n    { title: 'Card 1', description: 'Description for card 1.' },\n    { title: 'Card 2', description: 'Description for card 2.' },\n    { title: 'Card 3', description: 'Description for card 3.' }\n  ];\n\n  return (\n    <div>\n      <nav>\n        <a href=\"#\">Home</a>\n        <a href=\"#\">About</a>\n        <a href=\"#\">Contact</a>\n      </nav>\n      <div className=\"container\">\n        {cards.map((card, index) => (\n          <Card key={index} title={card.title} description={card.description} />\n        ))}\n      </div>\n      <div className=\"footer\">\n        <p>&copy; 2024 My Website</p>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"
    },
    {
        "problem_id": "000000002",
        "complexity_level": 0,
        "image": "imgs/000000002/000000002.png",
        "instruction_layout": "The page layout is a two-column layout, with the left side being the navigation bar and the right side being the main content area. The navigation bar background is light gray (#f0f0f0) and contains four links: 'Dashboard', 'Profile', 'Settings', 'Logout'. Each link is a vertically arranged button with appropriate spacing between them. The main content area includes a title and an information card. The title, 'User Information', is located at the top of the page, followed by an information card that contains the user's name, email, and an edit button. The card displays a shadow effect when hovered over. The bottom contains copyright information in dark gray (#444444), with a font size of 12px, centered.",
        "instruction_requirement": "I need a webpage layout with a navigation bar on the left and a main content area on the right. The navigation bar should include four links: 'Dashboard', 'Profile', 'Settings', 'Logout'. The main content area should display the title 'User Information' and an information card containing the name, email, and an edit button. The copyright information is located at the bottom of the page.",
        "style": "html {font-size: 16px; background-color: white; color: #333333;}\n.container { display: flex; }\nnav { background-color: #f0f0f0; padding: 15px; width: 200px; }\nnav a { display: block; margin: 10px 0; text-decoration: none; color: #333; }\nnav a:hover { text-decoration: underline; }\n.main { flex-grow: 1; padding: 20px; }\n.card { background-color: #ffffff; border: 1px solid #ddd; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); padding: 15px; transition: box-shadow 0.3s; }\n.card:hover { box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); }\n.footer { text-align: center; font-size: 12px; color: #444444; margin-top: 20px; }",
        "file_type": "js",
        "component": "import React from 'react';\n\nconst InfoCard = ({ name, email }) => {\n  return (\n    <div className=\"card\">\n      <h3>User Information</h3>\n      <p><strong>Name:</strong> {name}</p>\n      <p><strong>Email:</strong> {email}</p>\n      <button>Edit</button>\n    </div>\n  );\n};\n\nconst App = () => {\n  const user = {\n    name: 'John Doe',\n    email: 'john.doe@example.com'\n  };\n\n  return (\n    <div className=\"container\">\n      <nav>\n        <a href=\"#\">Dashboard</a>\n        <a href=\"#\">Profile</a>\n        <a href=\"#\">Settings</a>\n        <a href=\"#\">Logout</a>\n      </nav>\n      <div className=\"main\">\n        <h1>User Information</h1>\n        <InfoCard name={user.name} email={user.email} />\n        <div className=\"footer\">\n          <p>&copy; 2024 My Website</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"
    },
    {
        "problem_id": "000000008",
        "complexity_level": 0,
        "image": "imgs/000000008/000000008.png",
        "instruction_layout": "A user registration interface, featuring a registration form, social media login buttons, and a prompt message area. The registration form is centered on the page with a light purple (#ede7f6) background, containing input fields (username, email, password) and a registration button. Simple validation messages are displayed below each input field. Below the registration form, there are social media login buttons represented by three icons (Google, Facebook, Twitter), which, when clicked, simulate social media logins. At the bottom of the page, there is a prompt message area displaying a login link for users who already have an account.",
        "instruction_requirement": "This page requires the implementation of a user registration feature, including input fields for username, email, and password. Basic format validation should be performed after user input. The registration button should only be clickable when all inputs are valid, and a success message should be displayed upon clicking. The page should include social media login options, allowing users to register with their social media accounts. A login prompt should be provided at the bottom to facilitate existing users in navigating to the login page.",
        "style": "html {font-size: 16px; background-color: white; color: #333;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.form { display: flex; flex-direction:column; background-color: #ede7f6; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); }\n.input { margin-bottom: 10px; padding: 10px; width: 300px; border: 1px solid #ccc; border-radius: 4px; }\n.register-button { background-color: #673ab7; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer; }\n.register-button:hover { background-color: #5e35b1; }\n.social-buttons { display: flex; justify-content: center; margin: 20px 0; }\n.social-button { margin: 0 10px; cursor: pointer; }\n.footer { margin-top: 20px; text-align: center; font-size: 14px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst RegisterForm = () => {\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setMessage('Registration Success!');\n  };\n\n  return (\n    <div className=\"container\">\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <h2>Registration</h2>\n        <input\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"user name\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n          required\n        />\n        <input\n          type=\"email\"\n          className=\"input\"\n          placeholder=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n        <input\n          type=\"password\"\n          className=\"input\"\n          placeholder=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n        <button className=\"register-button\">register</button>\n        {message && <p>{message}</p>}\n      </form>\n      <div className=\"social-buttons\">\n        <span className=\"social-button\">Google</span>\n        <span className=\"social-button\">Facebook</span>\n        <span className=\"social-button\">Twitter</span>\n      </div>\n      <div className=\"footer\">\n        <p>Already has an account<a href=\"#\">login</a></p>\n      </div>\n    </div>\n  );\n};\n\nexport default RegisterForm;"
    },
    {
        "problem_id": "000000013",
        "complexity_level": 0,
        "image": "imgs/000000013/000000013.png",
        "instruction_layout": "The page layout is a voting system interface, featuring a candidate list and a voting results chart. The candidate list is located on the left side of the page, listing the names and brief descriptions of all candidates. Each candidate has a voting button next to them. The voting results chart is on the right side of the page, dynamically displaying the percentage of votes each candidate has received. Users can cast their votes by clicking the voting button next to the candidate, and there is a submit button at the bottom of the page to submit all votes.",
        "instruction_requirement": "This page requires the implementation of a simple voting system where users can vote for their favorite candidates. The candidate list should clearly display the candidate's name and brief introduction, with a voting button next to each candidate. After a user clicks to vote, the chart should update in real-time to show the new voting proportions. The submit button is used to confirm all votes, and upon clicking, a message indicating successful voting should be displayed. The page design should ensure intuitive and smooth user interaction.",
        "style": "html {font-size: 16px; background-color: #f4f4f4; color: #333;}\n.container { display: flex; justify-content: space-between; padding: 20px; }\n.candidate-list { width: 40%; }\n.candidate-item { margin-bottom: 10px; padding: 10px; background-color: #fff; border-radius: 4px; }\n.vote-button { padding: 5px 10px; background-color: #4CAF50; color: white; border: none; border-radius: 3px; cursor: pointer; }\n.vote-button:hover { background-color: #45a049; }\n.results-chart { width: 55%; padding: 20px; background-color: #fff; border-radius: 4px; }\n.submit-button { width: 100%; padding: 10px 15px; background-color: #2196F3; color: white; border: none; border-radius: 4px; cursor: pointer; }\n.submit-button:hover { background-color: #1976D2; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst VotingSystem = () => {\n  const [votes, setVotes] = useState({ Alice: 0, Bob: 0, Carol: 0 });\n\n  const handleVote = (candidate) => {\n    setVotes(prevVotes => ({ ...prevVotes, [candidate]: prevVotes[candidate] + 1 }));\n  };\n\n  const handleSubmit = () => {\n    alert('Thanks for your votes!');\n  };\n\n  return (\n    <div className='container'>\n      <div className='candidate-list'>\n        {Object.keys(votes).map((candidate, index) => (\n          <div key={index} className='candidate-item'>\n            <p>{candidate}</p>\n            <button onClick={() => handleVote(candidate)} className='vote-button'>Vote for {candidate}</button>\n          </div>\n        ))}\n      </div>\n      <div className='results-chart'>\n        {Object.entries(votes).map(([candidate, count], index) => (\n          <div key={index}>\n            <p>{candidate}: {count} votes</p>\n          </div>\n        ))}\n      </div>\n      <button onClick={handleSubmit} className='submit-button'>Submit Votes</button>\n    </div>\n  );\n};\n\nexport default VotingSystem;"
    },
    {
        "problem_id": "000000021",
        "complexity_level": 0,
        "image": "imgs/000000021/000000021.png",
        "instruction_layout": "This interface is designed as an interactive plant care diary, divided into three main sections: plant log input area, plant growth record list, and daily care tips area. Users record daily care activities such as watering and fertilizing in the log input area. The growth record list displays all plant care logs entered by the user, with each record detailing the date and type of care activity. The daily care tips area provides customized care suggestions based on the user's plant type and season.",
        "instruction_requirement": "This system is designed to assist plant enthusiasts in tracking and managing their plant care activities, allowing users to systematically record and view the care history of their plants, and receive practical care suggestions based on the provided data. The user interface should be simple and easy to use, enabling users to quickly add and view care records, while automatically updating care suggestions to accommodate different care needs.",
        "style": "html {font-size: 16px; background-color: #eef5ee; color: #333;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.input-area { width: 90%; margin-bottom: 20px; padding: 10px; background-color: #ffffff; border-radius: 5px; }\n.log-list { width: 90%; padding: 10px; background-color: #ffffff; border-radius: 5px; margin-bottom: 20px; }\n.care-tip { width: 90%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.input-field { width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; margin-bottom: 10px; }\n.submit-button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; }\n.submit-button:hover { background-color: #45a049; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst PlantCareDiary = () => {\n  const [logEntry, setLogEntry] = useState('');\n  const [logs, setLogs] = useState([]);\n  const [careTips, setCareTips] = useState('Make sure to water the plants at least once a week, and be careful not to let water accumulate.');\n\n  const handleAddLog = () => {\n    const newLogs = [...logs, logEntry];\n    setLogs(newLogs);\n    setLogEntry('');\n    updateCareTips();\n  };\n\n  const updateCareTips = () => {\n    // Update care instructions based on the type of plant and its maintenance history.\n    setCareTips('Consider adjusting the frequency of watering and fertilizing according to the current season.');\n  };\n\n  return (\n    <div className='container'>\n      <div className='input-area'>\n        <textarea className='input-field' placeholder='Record maintenance activities such as watering and fertilizing.' value={logEntry} onChange={(e) => setLogEntry(e.target.value)} />\n        <button className='submit-button' onClick={handleAddLog}>Add record</button>\n      </div>\n      <div className='log-list'>\n        {logs.map((log, index) => (\n          <div key={index}>{log}</div>\n        ))}\n      </div>\n      <div className='care-tip'>\n        <p>{careTips}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default PlantCareDiary;"
    },
    {
        "problem_id": "000000022",
        "complexity_level": 0,
        "image": "imgs/000000022/000000022.png",
        "instruction_layout": "This page is designed as a book note application interface focused on reading experience, mainly divided into three parts: book selection area, reading note input area, and note organization area. The book selection area allows users to choose a book from an existing list for reading and recording. The reading note input area provides text input functionality, enabling users to add notes at any time during reading. The note organization area displays all notes entered by the user and allows for editing and deletion operations.",
        "instruction_requirement": "The app is designed to help users who love reading to record and organize their reading notes. Users can select books from the book selection area, then add thoughts and excerpts from the books in the reading note input area. All notes will be saved in the note organization area, where users can view and adjust them at any time. The app interface should maintain a clean and minimalist style to reduce operational complexity, allowing users to focus on reading and recording.",
        "style": "html {font-size: 16px; background-color: #fafafa; color: #333;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.book-select { width: 90%; padding: 10px; margin-bottom: 20px; background-color: #ffffff; border-radius: 5px; }\n.note-input { width: 90%; height: 150px; padding: 10px; background-color: #ffffff; border: 1px solid #ccc; border-radius: 5px; margin-bottom: 20px; }\n.note-list { width: 90%; padding: 10px; background-color: #ffffff; border-radius: 5px; }\n.note-item { padding: 10px; border-bottom: 1px solid #eee; display: flex; justify-content: space-between; align-items: center; }\n.edit-button, .delete-button { padding: 5px 10px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; }\n.edit-button:hover, .delete-button:hover { background-color: #45a049; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst BookNotesApp = () => {\n  const [selectedBook, setSelectedBook] = useState('');\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n\n  const handleNoteAdd = () => {\n    setNotes([...notes, newNote]);\n    setNewNote('');\n  };\n\n  return (\n    <div className='container'>\n      <select className='book-select' value={selectedBook} onChange={(e) => setSelectedBook(e.target.value)}>\n        <option value=''>Select Book</option>\n        <option value='book1'>book 1</option>\n        <option value='book2'>book 2</option>\n      </select>\n      <textarea className='note-input' placeholder='Please enter your reading notes here.' value={newNote} onChange={(e) => setNewNote(e.target.value)} />\n      <button onClick={handleNoteAdd} className='submit-button'>Add note</button>\n      <div className='note-list'>\n        {notes.map((note, index) => (\n          <div key={index} className='note-item'>\n            <span>{note}</span>\n            <button className='edit-button'>Edit</button>\n            <button className='delete-button' onClick={() => setNotes(notes.filter((_, i) => i !== index))}>Delete</button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default BookNotesApp;"
    },
    {
        "problem_id": "000000023",
        "complexity_level": 0,
        "image": "imgs/000000023/000000023.png",
        "instruction_layout": "This interface is an online event registration platform, designed in three sections: event list, event details, and user registration form. The event list is located on the left side of the page, displaying various upcoming events. Clicking on any event will show its detailed information in the central area, including the event time, location, and organizer. The user registration form is on the right side of the page, where users can fill in their personal information and submit to register for the selected event.",
        "instruction_requirement": "This platform aims to provide a user-friendly experience for event registration. The event list should clearly display all options, making it easy for users to browse and select. Detailed information about each event must be provided to allow users to fully understand the content. The registration form should be simple and easy to fill out, with clear feedback confirming successful registration after submission. The overall design should focus on the intuitiveness and smoothness of user operations, ensuring that users can quickly and efficiently complete the registration process.",
        "style": "html {font-size: 16px; background-color: #f0f2f5; color: #333;}\n.container { display: flex; justify-content: space-around; padding: 20px; }\n.event-list { width: 25%; padding: 10px; background-color: #ffffff; border-radius: 5px; overflow-y: auto; }\n.event-details { width: 50%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.registration-form { width: 20%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.input-field { width: 100%; padding: 8px; border: 1px solid #ccc; margin-bottom: 10px; }\n.submit-button { width: 100%; padding: 10px; background-color: #007bff; color: white; border: none; cursor: pointer; }\n.submit-button:hover { background-color: #0056b3; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst EventRegistrationApp = () => {\n  const [events, setEvents] = useState([{ name: 'Technical Meeting', description: 'Exploring the latest cloud computing technologies...', date: '2021-09-10' }, { name: 'Photography Workshop', description: 'Photography Workshop', date: '2021-09-20' }]);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [registrantInfo, setRegistrantInfo] = useState({ name: '', email: '', phone: '' });\n\n  const handleEventSelect = (event) => {\n    setSelectedEvent(event);\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setRegistrantInfo(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = () => {\n    alert('Registration Success!');\n  };\n\n  return (\n    <div className='container'>\n      <div className='event-list'>\n        {events.map((event, index) => (\n          <div key={index} onClick={() => handleEventSelect(event)}>{event.name}</div>\n        ))}\n      </div>\n      <div className='event-details'>\n        {selectedEvent ? (\n          <div>\n            <h2>{selectedEvent.name}</h2>\n            <p>{selectedEvent.description}</p>\n            <p>Date: {selectedEvent.date}</p>\n          </div>\n        ) : <p>Please select an activity</p>}\n      </div>\n      <div className='registration-form'>\n        <input type='text' name='name' placeholder='name' className='input-field' value={registrantInfo.name} onChange={handleInputChange} />\n        <input type='email' name='email' placeholder='email' className='input-field' value={registrantInfo.email} onChange={handleInputChange} />\n        <input type='text' name='phone' placeholder='phone' className='input-field' value={registrantInfo.phone} onChange={handleInputChange} />\n        <button className='submit-button' onClick={handleSubmit}>register</button>\n      </div>\n    </div>\n  );\n};\n\nexport default EventRegistrationApp;"
    },
    {
        "problem_id": "000000024",
        "complexity_level": 0,
        "image": "imgs/000000024/000000024.png",
        "instruction_layout": "This interface is designed as a virtual exhibition hall navigation system, divided into exhibition hall map navigation area, exhibit detailed information area, and virtual tour assistant. The exhibition hall map navigation area is on the left side of the page, providing an interactive layout map of the exhibition hall, allowing users to click on different exhibition areas to view exhibits. The exhibit detailed information area is located in the center of the page, displaying the historical background, artistic features, and other detailed information of the selected exhibit based on user selection. The virtual tour assistant is on the right side of the page, providing voice commentary buttons and text input Q&A functions to enhance user interaction experience.",
        "instruction_requirement": "The system aims to provide users with an immersive virtual exhibition hall experience. The map navigation area should support users in selecting and viewing information about exhibits in different exhibition areas by clicking. The exhibit detail information area needs to present rich content, including but not limited to the era, artistic style, historical significance, etc., of the exhibits. The virtual tour assistant should be able to respond to user voice commands and text queries, providing corresponding information explanations and interactions. The entire interface design should be simple and intuitive, with smooth operation, ensuring that users can easily navigate and obtain information.",
        "style": "html {font-size: 16px; background-color: #f0f0f0; color: #333;}\n.container { display: flex; justify-content: space-between; padding: 20px; height: 80vh; }\n.map-section { width: 25%; padding: 20px; background-color: #ffffff; border-radius: 5px; overflow-y: auto; }\n.details-section { width: 50%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.assistant-section { width: 20%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.interactive-map { width: 100%; height: 300px; background-color: #ddd; }\n.voice-button, .text-input { padding: 10px; margin-top: 10px; width: 100%; border: 1px solid #ccc; border-radius: 4px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst VirtualMuseumGuide = () => {\n  const [selectedExhibit, setSelectedExhibit] = useState(null);\n  const [voiceAssistEnabled, setVoiceAssistEnabled] = useState(false);\n  const [textQuery, setTextQuery] = useState('');\n\n  const handleExhibitSelect = (exhibit) => {\n    setSelectedExhibit(exhibit);\n  };\n\n  const handleVoiceToggle = () => {\n    setVoiceAssistEnabled(!voiceAssistEnabled);\n  };\n\n  const handleTextQuery = (e) => {\n    setTextQuery(e.target.value);\n    // Process the text query to fetch information\n  };\n\n  return (\n    <div className='container'>\n      <div className='map-section'>\n        <div className='interactive-map'>Click on the exhibition area for details</div>\n      </div>\n      <div className='details-section'>\n        {selectedExhibit ? (\n          <div>\n            <h2>{selectedExhibit.name}</h2>\n            <p>{selectedExhibit.description}</p>\n          </div>\n        ) : <p>Please select an exhibition area.</p>}\n      </div>\n      <div className='assistant-section'>\n        <button className='voice-button' onClick={handleVoiceToggle}>{voiceAssistEnabled ? 'Turn off voice assistant' : 'Turn on voice assistant'}</button>\n        <input type='text' className='text-input' placeholder='enter question' value={textQuery} onChange={handleTextQuery} />\n      </div>\n    </div>\n  );\n};\n\nexport default VirtualMuseumGuide;"
    },
    {
        "problem_id": "000000025",
        "complexity_level": 0,
        "image": "imgs/000000025/000000025.png",
        "instruction_layout": "This page is designed as an interactive literary work reading platform, divided into three sections: work catalog, reading interface, and interactive comment section. The work catalog is listed on the left side of the page, displaying different literary work categories and titles. After selecting a work, the reading interface displays the content of the work in the center of the page, supporting user customization of font size and background color to optimize the reading experience. The interactive comment section is located on the right side of the page, where users can express their opinions on the work and exchange thoughts with other readers.",
        "instruction_requirement": "The platform aims to provide an immersive environment for reading and discussing literary works. The catalog of works needs to clearly display various literary works, facilitating quick user selection. The reading interface should support text display adjustments to ensure comfortable reading for users with different visual abilities. The interactive comment section must enable real-time commenting, encouraging interaction and discussion among readers. The overall interface design should exude an artistic atmosphere while maintaining intuitive and easy operation.",
        "style": "html {font-size: 16px; background-color: #f6f6ef; color: #333;}\n.container { display: flex; padding: 20px; height: 90vh; }\n.catalog { width: 20%; background-color: #ffffff; border-right: 1px solid #ddd; padding: 20px; overflow-y: auto; }\n.reading-area { flex-grow: 2; padding: 20px; background-color: #ffffff; }\n.comment-section { width: 25%; background-color: #ffffff; border-left: 1px solid #ddd; padding: 20px; overflow-y: auto; }\n.adjust-settings { margin-bottom: 10px; }\n.comment-box { width: 100%; margin-top: 10px; }\n.comment-button { padding: 8px 16px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }\n.comment-button:hover { background-color: #45a049; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst LiteraryReadingPlatform = () => {\n  const [selectedWork, setSelectedWork] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n\n  const handleSelectWork = (work) => {\n    setSelectedWork(work);\n  };\n\n  const handleCommentSubmit = () => {\n    if (newComment.trim()) {\n      setComments([...comments, newComment]);\n      setNewComment('');\n    }\n  };\n\n  return (\n    <div className='container'>\n      <div className='catalog'>\n        {/* Here is the list of works catalog */}\n      </div>\n      <div className='reading-area'>\n        {selectedWork ? <p>{selectedWork.content}</p> : <p>Please select the work to read</p>}\n        <div className='adjust-settings'>\n          {/* Font size and background color adjustment controls*/}\n        </div>\n      </div>\n      <div className='comment-section'>\n        <textarea className='comment-box' value={newComment} onChange={(e) => setNewComment(e.target.value)} placeholder='write your comment...' />\n        <button className='comment-button' onClick={handleCommentSubmit}>publish comment</button>\n        {comments.map((comment, index) => <p key={index}>{comment}</p>)}\n      </div>\n    </div>\n  );\n};\n\nexport default LiteraryReadingPlatform;"
    },
    {
        "problem_id": "000000026",
        "complexity_level": 0,
        "image": "imgs/000000026/000000026.png",
        "instruction_layout": "This page is designed as an online restaurant reservation system, divided into three main sections: restaurant seating map, reservation information input area, and order confirmation area. The restaurant seating map displays the layout of various tables within the restaurant, with each table selectable by clicking. The reservation information input area allows users to fill in the reservation date, time, and number of people. The order confirmation area is used to display the seats selected by the user and the filled-in reservation information for final confirmation.",
        "instruction_requirement": "This system aims to provide users with convenient restaurant reservation services. Users select a table by clicking on it in the seating chart, then enter specific reservation details in the booking information area. After completing these steps, users can review the entered information in the order confirmation area and submit the order if everything is correct. The system interface should be simple and clear, with a smooth operation process, ensuring that users can easily complete the reservation.",
        "style": "html {font-size: 16px; background-color: #fff; color: #333;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.seating-chart { width: 90%; height: 300px; background-color: #f8f8f8; border: 1px solid #ccc; margin-bottom: 20px; }\n.input-form { width: 90%; margin-bottom: 20px; }\n.input-field { width: 100%; padding: 8px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 4px; }\n.confirm-section { width: 90%; padding: 20px; background-color: #f8f8f8; border: 1px solid #ccc; }\n.submit-button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }\n.submit-button:hover { background-color: #45a049; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst RestaurantBookingSystem = () => {\n  const [selectedTable, setSelectedTable] = useState('');\n  const [bookingDetails, setBookingDetails] = useState({ date: '', time: '', guests: 0 });\n  const [confirmation, setConfirmation] = useState(false);\n\n  const handleTableSelect = (table) => {\n    setSelectedTable(table);\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setBookingDetails({ ...bookingDetails, [name]: value });\n  };\n\n  const handleSubmit = () => {\n    setConfirmation(true);\n  };\n\n  return (\n    <div className='container'>\n      <div className='seating-chart' onClick={() => handleTableSelect('Table 5')}>click to select seat</div>\n      <div className='input-form'>\n        <input type='date' name='date' className='input-field' onChange={handleInputChange} />\n        <input type='time' name='time' className='input-field' onChange={handleInputChange} />\n        <input type='number' name='guests' placeholder='guests' className='input-field' onChange={handleInputChange} />\n      </div>\n      <div className='confirm-section'>\n        {confirmation ? <p>Reservation successful! Table number: {selectedTable}, date: {bookingDetails.date}, time: {bookingDetails.time}, guest number: {bookingDetails.guests}</p> : 'Please confirm and submit your order.'}\n        <button className='submit-button' onClick={handleSubmit}>Submit Reservation</button>\n      </div>\n    </div>\n  );\n};\n\nexport default RestaurantBookingSystem;"
    },
    {
        "problem_id": "000000027",
        "complexity_level": 0,
        "image": "imgs/000000027/000000027.png",
        "instruction_layout": "This page is designed as a multifunctional personal health management system, divided into three core modules: Health Data Monitoring Area, Personal Health Log Area, and Health Advice Receiving Area. The Health Data Monitoring Area is located on the left side of the page, displaying users' real-time physiological indicators such as heart rate and blood pressure. The Personal Health Log Area is in the center of the page, where users can input and view their health activity records, including diet and exercise. The Health Advice Receiving Area is on the right side of the page, automatically pushing personalized health advice based on users' health data and logs.",
        "instruction_requirement": "This system aims to provide users with a comprehensive health management solution. The health data monitoring area needs to accurately and in real-time display key physiological indicators. The personal health log area should support users in easily recording and reviewing their health behaviors, such as diet and exercise. The health advice receiving area should intelligently generate and display health improvement suggestions based on the user's actual data. The system interface design should be clear and user-friendly, ensuring that users can conveniently manage their health.",
        "style": "html {font-size: 16px; background-color: #fff; color: #333;}\n.container { display: flex; justify-content: space-between; padding: 20px; height: 80vh; }\n.monitoring-section { width: 30%; padding: 20px; background-color: #eef2ff; border-radius: 5px; }\n.log-section { width: 40%; padding: 20px; background-color: #feffe6; border-radius: 5px; }\n.advice-section { width: 25%; padding: 20px; background-color: #e6ffed; border-radius: 5px; }\n.input-field { width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; margin-bottom: 10px; }\n.submit-button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }\n.submit-button:hover { background-color: #45a049; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst HealthManagementSystem = () => {\n  const [healthData, setHealthData] = useState({ heartRate: 72, bloodPressure: '120/80' });\n  const [healthLogs, setHealthLogs] = useState([]);\n  const [healthAdvice, setHealthAdvice] = useState('Based on your records, it is recommended to walk at least 8,000 steps per day.');\n\n  const addHealthLog = (log) => {\n    setHealthLogs([...healthLogs, log]);\n    setHealthAdvice('Please ensure to maintain adequate water intake.');\n  };\n\n  return (\n    <div className='container'>\n      <div className='monitoring-section'>\n        heart beat rate: {healthData.heartRate} BPM\n        blood presure: {healthData.bloodPressure}\n      </div>\n      <div className='log-section'>\n        <input type='text' className='input-field' placeholder='enter activity record' />\n        <button className='submit-button' onClick={() => addHealthLog('walk for 8,000 steps')}>add record</button>\n        {healthLogs.map((log, index) => <div key={index}>{log}</div>)}\n      </div>\n      <div className='advice-section'>\n        {healthAdvice}\n      </div>\n    </div>\n  );\n};\n\nexport default HealthManagementSystem;"
    },
    {
        "problem_id": "000000028",
        "complexity_level": 0,
        "image": "imgs/000000028/000000028.png",
        "instruction_layout": "This interface is designed as a city public transportation query system, divided into three sections: route query area, timetable display area, and fare calculator. The route query area allows users to input the starting station and destination station, and the system will display feasible route options. The timetable display area details the departure and arrival times of the selected route. The fare calculator estimates the fare based on the user's route selection.",
        "instruction_requirement": "This system aims to provide users with a convenient public transportation planning tool. After users input stations in the route query area, the system should quickly provide different transportation options for users to choose from. The timetable of the selected route should be clearly displayed in the timetable display area, including all key time points. The fare calculator should automatically calculate and display the estimated fare based on the selected route. The interface design should be simple and clear, allowing users to quickly obtain the necessary information and optimize their travel plans.",
        "style": "html {font-size: 16px; background-color: #f5f5f5; color: #333;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.route-search { width: 90%; padding: 10px; background-color: #ffffff; border-radius: 5px; margin-bottom: 10px; }\n.timetable-display { width: 90%; padding: 20px; background-color: #ffffff; border-radius: 5px; margin-bottom: 10px; }\n.fare-calculator { width: 90%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.input-field { width: 100%; padding: 8px; border: 1px solid #ccc; margin-bottom: 10px; }\n.submit-button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }\n.submit-button:hover { background-color: #45a049; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst PublicTransportSystem = () => {\n  const [route, setRoute] = useState('');\n  const [timetable, setTimetable] = useState([]);\n  const [fare, setFare] = useState('');\n\n  const handleSearch = () => {\n    setTimetable(['08:00 - 08:30', '09:00 - 09:30']);\n    setFare('5 dollars');\n  };\n\n  return (\n    <div className='container'>\n      <div className='route-search'>\n        <input type='text' className='input-field' placeholder='Enter the starting station.' />\n        <input type='text' className='input-field' placeholder='Enter the target station.' />\n        <button className='submit-button' onClick={handleSearch}>Check the route</button>\n      </div>\n      <div className='timetable-display'>\n        {timetable.map((time, index) => <div key={index}>{time}</div>)}\n      </div>\n      <div className='fare-calculator'>\n        Estimate the fare: {fare}\n      </div>\n    </div>\n  );\n};\n\nexport default PublicTransportSystem;"
    },
    {
        "problem_id": "000000029",
        "complexity_level": 0,
        "image": "imgs/000000029/000000029.png",
        "instruction_layout": "This page is designed as an online language learning support tool, divided into three main functional areas: Word Learning Zone, Grammar Practice Zone, and Language Test Zone. The Word Learning Zone allows users to browse and review new words, with support for filtering by category. The Grammar Practice Zone offers exercises on various grammar points to help users consolidate their grammar knowledge. The Language Test Zone provides comprehensive language proficiency tests, and the test results help users understand their language mastery level.",
        "instruction_requirement": "This system aims to help users improve their language skills through interactive learning. The vocabulary learning area requires clear word display and categorization functions to facilitate user learning and review. The grammar practice area should include various question types to ensure comprehensive practice of grammar points. The language test area should have scientifically designed tests that accurately reflect the user's language proficiency. The overall interface design should focus on user experience, making the learning process both efficient and enjoyable.",
        "style": "html {font-size: 16px; background-color: #eef2f8; color: #333;}\n.container { display: flex; justify-content: space-around; padding: 20px; height: 90vh; }\n.vocabulary-section { width: 30%; padding: 20px; background-color: #ffffff; border-radius: 5px; overflow-y: auto; }\n.grammar-section { width: 35%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.test-section { width: 30%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.input-field { width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; margin-bottom: 10px; }\n.submit-button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }\n.submit-button:hover { background-color: #45a049; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst LanguageLearningTool = () => {\n  const [vocabularies, setVocabularies] = useState(['apple', 'banana', 'cherry']);\n  const [grammarQuestions, setGrammarQuestions] = useState(['What is the correct past tense of go?', 'Choose the correct form of the verb to complete the sentence.']);\n  const [testResults, setTestResults] = useState('80%');\n\n  const handleVocabularyReview = (word) => {\n    alert('You selected: ' + word);\n  };\n\n  const handleGrammarAnswer = (answer) => {\n    alert('Your answer: ' + answer + ' is recorded.');\n  };\n\n  const handleTakeTest = () => {\n    alert('Your score is: ' + testResults);\n  };\n\n  return (\n    <div className='container'>\n      <div className='vocabulary-section'>\n        {vocabularies.map((word, index) => <div key={index} onClick={() => handleVocabularyReview(word)}>{word}</div>)}\n      </div>\n      <div className='grammar-section'>\n        {grammarQuestions.map((question, index) => (\n          <div key={index}>\n            <p>{question}</p>\n            <input type='text' className='input-field' placeholder='Type your answer here' />\n            <button className='submit-button' onClick={() => handleGrammarAnswer('Correct')}>Submit Answer</button>\n          </div>\n        ))}\n      </div>\n      <div className='test-section'>\n        <button className='submit-button' onClick={handleTakeTest}>Take a Test</button>\n        <p>Your last test score: {testResults}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default LanguageLearningTool;"
    },
    {
        "problem_id": "000000030",
        "complexity_level": 0,
        "image": "imgs/000000030/000000030.png",
        "instruction_layout": "This interface is designed as a music performance ticket booking system, divided into three sections: performance selection area, seat selection area, and ticket payment area. The performance selection area lists various upcoming concerts and performances, allowing users to choose according to their preferences. The seat selection area displays the seating chart of the selected performance, where users can choose seats based on their preferences and ticket prices. The ticket payment area provides order details and payment options, where users can confirm payment after selecting their seats.",
        "instruction_requirement": "This system aims to provide music enthusiasts with convenient performance ticket booking services. The performance selection area should clearly display the basic information of all available performances, such as dates, locations, and main performers. The seating selection area should visually present the seating layout of different price zones, allowing users to quickly make their choices. The ticket payment area needs to integrate order information and provide a secure payment process. The overall interface design should be modern, ensuring a smooth user experience and easy ticket purchase.",
        "style": "html {font-size: 16px; background-color: #f4f4f4; color: #333;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.show-select { width: 90%; margin-bottom: 20px; padding: 10px; background-color: #ffffff; border-radius: 5px; }\n.seat-select { width: 90%; margin-bottom: 20px; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.payment-section { width: 90%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.input-field { width: 100%; padding: 8px; border: 1px solid #ccc; margin-bottom: 10px; }\n.pay-button { padding: 10px 20px; background-color: #007bff; color: white; border: none; cursor: pointer; }\n.pay-button:hover { background-color: #0056b3; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst ConcertTicketBooking = () => {\n  const [selectedShow, setSelectedShow] = useState(null);\n  const [selectedSeats, setSelectedSeats] = useState([]);\n  const [paymentDetails, setPaymentDetails] = useState({ total: 0 });\n\n  const handleShowSelect = (show) => {\n    setSelectedShow(show);\n  };\n\n  const handleSeatSelect = (seat, price) => {\n    setSelectedSeats([...selectedSeats, seat]);\n    setPaymentDetails({ total: paymentDetails.total + price });\n  };\n\n  const handlePayment = () => {\n    alert('Payment successful, thank you for your purchase!');\n  };\n\n  return (\n    <div className='container'>\n      <div className='show-select'>\n        {/* Display the performance list */}\n        <button onClick={() => handleShowSelect('Concert A')}>Select Concert A</button>\n      </div>\n      <div className='seat-select'>\n        {/* Show seat selection */}\n        <button onClick={() => handleSeatSelect('1A', 300)}>select seat 1A, price 300 dollars</button>\n      </div>\n      <div className='payment-section'>\n        <p>total: {paymentDetails.total} Dollars</p>\n        <button className='pay-button' onClick={handlePayment}>pay</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ConcertTicketBooking;"
    },
    {
        "problem_id": "000000032",
        "complexity_level": 0,
        "image": "imgs/000000032/000000032.png",
        "instruction_layout": "This page is designed as an environmental monitoring data visualization platform, divided into three sections: monitoring site selection area, data display area, and data analysis area. The monitoring site selection area allows users to select different environmental monitoring sites from the map. The data display area in the center of the page presents real-time environmental data from the selected monitoring sites, such as air quality, temperature, humidity, etc. The data analysis area on the right side of the page provides graphical displays of data trend analysis and prediction models.",
        "instruction_requirement": "This platform aims to provide environmental scientists and the public with real-time environmental monitoring data and in-depth data analysis. The monitoring site selection area needs to offer an interactive map, allowing users to easily choose different monitoring points. The data display area should clearly show all key environmental indicators for the selected site. The data analysis area should use charts and models to clearly present historical trends and future predictions of the data. The interface design should be simple and clear, with data presentation being easy to understand, to support scientific research and public information access.",
        "style": "html {font-size: 16px; background-color: #e5e5e5; color: #333;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; height: 90vh; }\n.station-select { width: 90%; margin-bottom: 20px; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.data-display { width: 90%; margin-bottom: 20px; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.analysis-section { width: 90%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.chart { width: 100%; height: 200px; background-color: #f0f0f0; margin-top: 10px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst EnvironmentalMonitoringPlatform = () => {\n  const [selectedStation, setSelectedStation] = useState('');\n  const [environmentalData, setEnvironmentalData] = useState({ airQuality: 'Good', temperature: 22, humidity: 55 });\n  const [trendAnalysis, setTrendAnalysis] = useState('Data trends indicate increasing temperatures over the past decade.');\n\n  const handleStationSelect = (station) => {\n    setSelectedStation(station);\n    // Fetch data for selected station\n  };\n\n  return (\n    <div className='container'>\n      <div className='station-select'>\n        <button onClick={() => handleStationSelect('Station A')}>Select Station A</button>\n      </div>\n      <div className='data-display'>\n        <h2>Environmental Data for {selectedStation}</h2>\n        <p>Air Quality: {environmentalData.airQuality}</p>\n        <p>Temperature: {environmentalData.temperature}°C</p>\n        <p>Humidity: {environmentalData.humidity}%</p>\n      </div>\n      <div className='analysis-section'>\n        <h2>Data Analysis</h2>\n        <p>{trendAnalysis}</p>\n        <div className='chart'>Trend Chart Placeholder</div>\n      </div>\n    </div>\n  );\n};\n\nexport default EnvironmentalMonitoringPlatform;"
    },
    {
        "problem_id": "000000033",
        "complexity_level": 0,
        "image": "imgs/000000033/000000033.png",
        "instruction_layout": "This page is designed as a city life guide platform focused on nighttime activities, divided into an activity recommendation area, a user interaction area, and a real-time traffic information area. The activity recommendation area is on the left side of the page, recommending upcoming nighttime activities based on user interests and activity history. The user interaction area is in the center of the page, displaying user comments and activity ratings, and supporting users to post their own activity experiences. The real-time traffic information area is on the right side of the page, showing the traffic conditions and best travel suggestions near the user's location.",
        "instruction_requirement": "The platform aims to provide urban nightlife enthusiasts with customized activity recommendations and convenient travel support. The activity recommendation area should accurately match user preferences and offer a diverse selection of nighttime activities. The user interaction area needs to support real-time comments and rating features, enhancing interaction among users and fostering a sense of community. The real-time traffic information area should provide accurate traffic data to help users plan their nighttime travel routes. The interface design should be vibrant, reflecting the charm of urban nightlife, while ensuring ease of user operation.",
        "style": "html {font-size: 16px; background-color: #232323; color: #fff;}\n.container { display: flex; flex-direction: row; justify-content: space-between; padding: 20px; height: 90vh; }\n.recommendation-section { width: 30%; padding: 20px; background-color: #383838; border-radius: 5px; overflow-y: auto; }\n.interaction-section { width: 35%; padding: 20px; background-color: #424242; border-radius: 5px; }\n.traffic-section { width: 30%; padding: 20px; background-color: #383838; border-radius: 5px; }\n.input-field { width: 100%; padding: 8px; border: 1px solid #777; border-radius: 4px; margin-bottom: 10px; background-color: #333; color: #fff; }\n.submit-button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }\n.submit-button:hover { background-color: #45a049; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst CityNightlifeGuide = () => {\n  const [activities, setActivities] = useState(['Jazz Night', 'Open Mic', 'Gallery Opening']);\n  const [userReviews, setUserReviews] = useState([]);\n  const [trafficInfo, setTrafficInfo] = useState('Traffic is light, perfect for a night out!');\n\n  const handleReviewSubmit = (review) => {\n    setUserReviews([...userReviews, review]);\n  };\n\n  return (\n    <div className='container'>\n      <div className='recommendation-section'>\n        {activities.map((activity, index) => <div key={index}>{activity}</div>)}\n      </div>\n      <div className='interaction-section'>\n        <textarea className='input-field' placeholder='Share your experience...' />\n        <button className='submit-button' onClick={() => handleReviewSubmit('Great experience!')}>Post Review</button>\n        {userReviews.map((review, index) => <div key={index}>{review}</div>)}\n      </div>\n      <div className='traffic-section'>\n        <p>{trafficInfo}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default CityNightlifeGuide;"
    },
    {
        "problem_id": "000000034",
        "complexity_level": 0,
        "image": "imgs/000000034/000000034.png",
        "instruction_layout": "This page is designed as an online reservation and coffee booking service platform for a café, divided into three areas: café seating layout map, coffee selection area, and order details area. The café seating layout map is on the left side of the page, providing real-time seat selection and seat status display. The coffee selection area is in the center of the page, where users can browse various coffee and snack options and choose their preferred products. The order details area is on the right side of the page, displaying the user's seat selection, selected coffee, and total price, and offering confirmation and payment functions.",
        "instruction_requirement": "The platform aims to provide coffee enthusiasts with a convenient online solution for booking seats and reserving coffee. The seating layout map needs to update seat occupancy status in real-time to ensure users can select the correct seats. The coffee selection area should include a wide variety of coffee and snacks options, and support one-click addition to the order. The order details section must clearly display the selected items and total cost, and offer a streamlined payment process. The entire interface design should be simple and clear, reflecting the warm and comfortable atmosphere of the café.",
        "style": "html {font-size: 16px; background-color: #f3f3f3; color: #333;}\n.container { display: flex; flex-direction: row; justify-content: space-around; padding: 20px; height: 90vh; }\n.layout-section { width: 30%; padding: 20px; background-color: #ffffff; border-radius: 5px; overflow-y: auto; }\n.coffee-selection { width: 40%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.order-details { width: 25%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.coffee-item { padding: 10px; border-bottom: 1px solid #eee; cursor: pointer; }\n.order-item { padding: 10px; border-bottom: 1px solid #eee; }\n.pay-button { padding: 10px 20px; background-color: #007bff; color: white; border: none; cursor: pointer; }\n.pay-button:hover { background-color: #0056b3; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst CafeReservationSystem = () => {\n  const [selectedSeat, setSelectedSeat] = useState('');\n  const [selectedCoffees, setSelectedCoffees] = useState([]);\n  const [totalPrice, setTotalPrice] = useState(0);\n\n  const handleSeatSelection = (seat) => {\n    setSelectedSeat(seat);\n  };\n\n  const addCoffeeToOrder = (coffee, price) => {\n    setSelectedCoffees([...selectedCoffees, coffee]);\n    setTotalPrice(totalPrice + price);\n  };\n\n  const handlePayment = () => {\n    alert('Payment successful, thank you for your purchase!');\n  };\n\n  return (\n    <div className='container'>\n      <div className='layout-section' onClick={() => handleSeatSelection('Seat 1')}>select seat 1</div>\n      <div className='coffee-selection'>\n        <div className='coffee-item' onClick={() => addCoffeeToOrder('Espresso', 30)}>Espresso - ￥30</div>\n      </div>\n      <div className='order-details'>\n        <div className='order-item'>seat: {selectedSeat}</div>\n        {selectedCoffees.map((coffee, index) => <div key={index} className='order-item'>{coffee}</div>)}\n        <div>total: ${totalPrice}</div>\n        <button className='pay-button' onClick={handlePayment}>pay</button>\n      </div>\n    </div>\n  );\n};\n\nexport default CafeReservationSystem;"
    },
    {
        "problem_id": "000000036",
        "complexity_level": 0,
        "image": "imgs/000000036/000000036.png",
        "instruction_layout": "This page is designed as a virtual botanical garden management system, divided into plant species directory, plant growth tracking area, and ecological environment simulation area. The plant species directory is on the left side of the page, listing all the species and names of plants in the garden. The plant growth tracking area is in the center of the page, displaying the growth data and photos of the selected plant. The ecological environment simulation area is on the right side of the page, where users can simulate the effects of different environmental conditions on plant growth.",
        "instruction_requirement": "The system is designed to assist horticulturists and ecological researchers in managing and studying plant growth. The plant species catalog should provide detailed classification information to facilitate quick search and selection by users. The plant growth tracking area should update the growth status of plants in real-time, including data such as growth rate and leaf color. The ecological environment simulation area should be able to display predicted results of plant growth based on user-set parameters (such as light, moisture, and temperature). The interface design should be scientifically rigorous, easy to operate, and simultaneously educational and practical.",
        "style": "html {font-size: 16px; background-color: #f7f7f7; color: #333;}\n.container { display: flex; flex-direction: row; justify-content: space-between; padding: 20px; height: 90vh; }\n.catalog-section { width: 20%; padding: 20px; background-color: #e2f0d9; border-radius: 5px; overflow-y: auto; }\n.growth-tracking { width: 50%; padding: 20px; background-color: #fffbea; border-radius: 5px; }\n.environment-simulation { width: 25%; padding: 20px; background-color: #e0f7fa; border-radius: 5px; }\n.data-display { padding: 10px; margin-bottom: 10px; border-bottom: 1px solid #ddd; }\n.simulate-button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }\n.simulate-button:hover { background-color: #45a049; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst VirtualBotanicalGarden = () => {\n  const [selectedPlant, setSelectedPlant] = useState(null);\n  const [growthData, setGrowthData] = useState({ height: '15 cm', color: 'Green' });\n  const [environmentSettings, setEnvironmentSettings] = useState({ light: 'Moderate', water: 'Regular', temperature: '22°C' });\n\n  const handleSelectPlant = (plant) => {\n    setSelectedPlant(plant);\n    // Fetch growth data for selected plant\n  };\n\n  const simulateGrowth = () => {\n    // Simulate growth based on environment settings\n    alert('Growth simulation complete!');\n  };\n\n  return (\n    <div className='container'>\n      <div className='catalog-section'>\n        <button onClick={() => handleSelectPlant('Fern')}>Choose fern plants</button>\n      </div>\n      <div className='growth-tracking'>\n        <div className='data-display'>Selected Plant: {selectedPlant}</div>\n        <div className='data-display'>Height: {growthData.height}</div>\n        <div className='data-display'>Leaf Color: {growthData.color}</div>\n      </div>\n      <div className='environment-simulation'>\n        <div>Light: {environmentSettings.light}</div>\n        <div>Water: {environmentSettings.water}</div>\n        <div>Temperature: {environmentSettings.temperature}</div>\n        <button className='simulate-button' onClick={simulateGrowth}>Simulate Growth</button>\n      </div>\n    </div>\n  );\n};\n\nexport default VirtualBotanicalGarden;"
    },
    {
        "problem_id": "000000037",
        "complexity_level": 0,
        "image": "imgs/000000037/000000037.png",
        "instruction_layout": "This page is designed as an urban waste sorting and recycling education platform, divided into three modules: Waste Sorting Education Area, Real-time Sorting Assistance Tool Area, and Community Recycling Point Map. The Waste Sorting Education Area is on the left side of the page, providing detailed sorting education videos and articles. The Real-time Sorting Assistance Tool Area is in the center of the page, where users can input the name of an item, and the system will instantly display the correct sorting method for that item. The Community Recycling Point Map is located on the right side of the page, showing the locations and operating hours of recycling points near the user.",
        "instruction_requirement": "This platform aims to enhance citizens' awareness and participation in waste sorting. The waste sorting education area needs to provide rich and easy-to-understand educational content to help users learn the correct sorting methods. The real-time sorting assistance tool area requires instant feedback functionality to ensure users can quickly find information. The community recycling point map must update accurate location information for ease of practical use. The interface design should be clear and user-friendly, encouraging users to actively participate in waste sorting and recycling activities.",
        "style": "html {font-size: 16px; background-color: #f9f9fa; color: #333;}\n.container { display: flex; flex-direction: row; justify-content: space-between; padding: 20px; height: 90vh; }\n.education-section { width: 30%; padding: 20px; background-color: #ffffff; border-radius: 5px; overflow-y: auto; }\n.assistance-tool { width: 40%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.recycling-map { width: 25%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.input-field { width: 100%; padding: 8px; border: 1px solid #ccc; margin-bottom: 10px; }\n.submit-button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }\n.submit-button:hover { background-color: #45a049; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst WasteSortingEducationPlatform = () => {\n  const [item, setItem] = useState('');\n  const [sortingMethod, setSortingMethod] = useState('');\n  const [recyclingPoints, setRecyclingPoints] = useState([]);\n\n  const handleInputChange = (e) => {\n    setItem(e.target.value);\n  };\n\n  const classifyWaste = () => {\n    // Assume logic to determine waste sorting category\n    setSortingMethod('Organic Waste');\n  };\n\n  return (\n    <div className='container'>\n      <div className='education-section'>\n        <h2>Garbage Sorting Education</h2>\n        <p>Learn how to properly sort household waste.</p>\n      </div>\n      <div className='assistance-tool'>\n        <input type='text' className='input-field' placeholder='enter item name' value={item} onChange={handleInputChange} />\n        <button className='submit-button' onClick={classifyWaste}>category</button>\n        <p>category: {sortingMethod}</p>\n      </div>\n      <div className='recycling-map'>\n        <h2>Nearby recycling points</h2>\n        {/* Display map and recycling point details here */}\n      </div>\n    </div>\n  );\n};\n\nexport default WasteSortingEducationPlatform;"
    },
    {
        "problem_id": "000000038",
        "complexity_level": 0,
        "image": "imgs/000000038/000000038.png",
        "instruction_layout": "This page is designed as an online disaster prevention education platform, divided into disaster information area, emergency preparedness guide area, and interactive simulation practice area. The disaster information area is on the left side of the page, providing real-time data and historical records of various natural disasters worldwide. The emergency preparedness guide area is in the center of the page, showcasing emergency response measures and safety knowledge for different types of disasters. The interactive simulation practice area is on the right side of the page, where users can learn disaster response skills through simulation games.",
        "instruction_requirement": "This platform aims to educate the public on how to identify and respond to natural disasters. The disaster information section requires real-time updates and detailed displays of the impacts of different disasters and emergency contact details. The emergency preparedness guide section should include easily understandable guidance to help users quickly grasp necessary safety measures. The interactive simulation practice area needs to provide a virtual environment for practical operations, enhancing the effectiveness and fun of learning. The interface design should be intuitive and user-friendly, ensuring rapid information dissemination and effective user learning.",
        "style": "html {font-size: 16px; background-color: #f4f9ff; color: #333;}\n.container { display: flex; justify-content: space-between; padding: 20px; height: 90vh; }\n.disaster-info { width: 30%; padding: 20px; background-color: #ffffff; border-radius: 5px; overflow-y: auto; }\n.preparation-guide { width: 40%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.interactive-simulation { width: 25%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.interactive-tool { width: 100%; height: 200px; background-color: #ddd; margin-top: 10px; }\n.button { padding: 10px 20px; background-color: #007bff; color: white; border: none; cursor: pointer; }\n.button:hover { background-color: #0056b3; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst DisasterEducationPlatform = () => {\n  const [disasterData, setDisasterData] = useState({ type: 'Earthquake', location: 'California', magnitude: 7.2 });\n  const [preparednessTips, setPreparednessTips] = useState('Always have an emergency kit ready.');\n  const [simulationResult, setSimulationResult] = useState('');\n\n  const handleSimulation = () => {\n    setSimulationResult('Simulation complete: You successfully evacuated.');\n  };\n\n  return (\n    <div className='container'>\n      <div className='disaster-info'>\n        <h2>Current Disaster: {disasterData.type}</h2>\n        <p>Location: {disasterData.location}</p>\n        <p>Magnitude: {disasterData.magnitude}</p>\n      </div>\n      <div className='preparation-guide'>\n        <h2>Preparation Guide</h2>\n        <p>{preparednessTips}</p>\n      </div>\n      <div className='interactive-simulation'>\n        <h2>Interactive Simulation</h2>\n        <div className='interactive-tool'>Interactive simulation tool here.</div>\n        <button className='button' onClick={handleSimulation}>Start Simulation</button>\n        <p>{simulationResult}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default DisasterEducationPlatform;"
    },
    {
        "problem_id": "000000039",
        "complexity_level": 0,
        "image": "imgs/000000039/000000039.png",
        "instruction_layout": "This page is designed as a city nighttime bicycle travel planning tool, divided into route planning area, night cycling safety guide area, and cycling community interaction area. The route planning area is on the left side of the page, where users can input the starting point and destination, and the system automatically plans the best cycling route. The night cycling safety guide area is in the center of the page, providing safety tips and equipment recommendations for night cycling. The cycling community interaction area is on the right side of the page, where users can share cycling experiences, participate in discussions, and join activities.",
        "instruction_requirement": "This tool is designed to help nighttime cyclists plan their routes safely and efficiently, while enhancing their awareness of cycling safety. The route planning section requires real-time traffic information integration to ensure the optimal path. The night cycling safety guide section should detail necessary safety measures and recommended equipment to strengthen cyclists' protection. The cycling community interaction area should provide a good social platform to encourage users to share and exchange cycling experiences. The overall interface design should be simple, lively, and easy to operate, encouraging user participation.",
        "style": "html {font-size: 16px; background-color: #f0f2f5; color: #333;}\n.container { display: flex; flex-direction: row; justify-content: space-between; padding: 20px; height: 90vh; }\n.route-plan { width: 30%; padding: 20px; background-color: #ffffff; border-radius: 5px; overflow-y: auto; }\n.safety-guide { width: 35%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.community-interaction { width: 30%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.input-field { width: 100%; padding: 8px; border: 1px solid #ccc; margin-bottom: 10px; }\n.submit-button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }\n.submit-button:hover { background-color: #45a049; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst NightCyclingPlanner = () => {\n  const [route, setRoute] = useState('');\n  const [safetyTips, setSafetyTips] = useState('Wear reflective clothing and use front and rear lights.');\n  const [communityPosts, setCommunityPosts] = useState([]);\n\n  const handleRouteInput = (start, end) => {\n    setRoute(`Route planned from ${start} to ${end}`);\n  };\n\n  const handlePostSubmit = (post) => {\n    setCommunityPosts([...communityPosts, post]);\n  };\n\n  return (\n    <div className='container'>\n      <div className='route-plan'>\n        <input type='text' className='input-field' placeholder='Enter start point' />\n        <input type='text' className='input-field' placeholder='Enter end point' />\n        <button className='submit-button' onClick={() => handleRouteInput('Park', 'Downtown')}>Plan Route</button>\n        <p>{route}</p>\n      </div>\n      <div className='safety-guide'>\n        <h2>Night Cycling Safety Guide</h2>\n        <p>{safetyTips}</p>\n      </div>\n      <div className='community-interaction'>\n        <textarea className='input-field' placeholder='Share your cycling story...'></textarea>\n        <button className='submit-button' onClick={() => handlePostSubmit('Great night ride!')}>Post</button>\n        {communityPosts.map((post, index) => <div key={index}>{post}</div>)}\n      </div>\n    </div>\n  );\n};\n\nexport default NightCyclingPlanner;"
    },
    {
        "problem_id": "000000042",
        "complexity_level": 0,
        "image": "imgs/000000042/000000042.png",
        "instruction_layout": "This page is designed as an online music learning platform, divided into Instrument Learning Zone, Music Theory Classroom, and Music Works Sharing Zone. The Instrument Learning Zone is on the left side of the page, offering video tutorials and practice pieces for various instruments. The Music Theory Classroom is in the center, explaining basic music theory, including scales, chords, and rhythm training. The Music Works Sharing Zone is on the right side, where users can upload their own performance videos or audio files to interact and receive feedback from other learners.",
        "instruction_requirement": "The platform aims to provide comprehensive learning resources and a communication platform for music enthusiasts. The instrument learning area should include tutorials from basic to advanced levels to meet the needs of learners at different stages. The music theory classroom needs to explain complex music theory in a clear and concise manner, supplemented by interactive questions and case analysis to enhance learning effectiveness. The music work sharing area should have good social functions, supporting user comments, likes, and sharing, encouraging interaction and growth among learners. The overall design should be simple and elegant, with intuitive operation, to attract more users to continue learning and sharing.",
        "style": "html {font-size: 16px; background-color: #fafafa; color: #333;}\n.container { display: flex; justify-content: space-between; padding: 20px; height: 90vh; }\n.instrument-section { width: 30%; padding: 20px; background-color: #ffffff; border-radius: 5px; overflow-y: auto; }\n.theory-classroom { width: 35%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.share-section { width: 30%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.video-upload { width: 100%; height: 200px; background-color: #ddd; margin-top: 10px; }\n.feedback { padding: 10px; margin-bottom: 10px; border-bottom: 1px solid #ddd; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst OnlineMusicLearningPlatform = () => {\n  const [instrumentVideos, setInstrumentVideos] = useState(['Piano Basics', 'Guitar Chords']);\n  const [musicTheory, setMusicTheory] = useState(['Understanding Scales', 'Chord Progressions']);\n  const [userPerformances, setUserPerformances] = useState([]);\n\n  const handleVideoUpload = (video) => {\n    setUserPerformances([...userPerformances, video]);\n  };\n\n  return (\n    <div className='container'>\n      <div className='instrument-section'>\n        {instrumentVideos.map((video, index) => <div key={index}>{video}</div>)}\n      </div>\n      <div className='theory-classroom'>\n        {musicTheory.map((theory, index) => <div key={index}>{theory}</div>)}\n      </div>\n      <div className='share-section'>\n        <input type='file' className='video-upload' onChange={(e) => handleVideoUpload(e.target.files[0])} />\n        {userPerformances.map((performance, index) => <div key={index} className='feedback'>{performance.name}</div>)}\n      </div>\n    </div>\n  );\n};\n\nexport default OnlineMusicLearningPlatform;"
    },
    {
        "problem_id": "000000043",
        "complexity_level": 0,
        "image": "imgs/000000043/000000043.png",
        "instruction_layout": "This page is designed as the user interface for a professional environmental monitoring system, divided into three sections: Monitoring Site Overview, Data Analysis, and Real-time Alarm System. The Monitoring Site Overview is located on the left side of the page, displaying the geographical locations of monitoring sites, main monitoring indicators, and equipment status. The Data Analysis section is in the center of the page, providing detailed historical data trends, comparative analysis, and predictive models for selected monitoring sites. The Real-time Alarm System is on the right side of the page, showing real-time abnormal alarm information for each site and offering quick response actions.",
        "instruction_requirement": "This system is designed to provide environmental monitoring professionals with an efficient and accurate tool for monitoring data management and analysis. The monitoring site overview area should clearly display key information for all monitoring sites, facilitating quick location and status checks. The data analysis area should offer robust data processing capabilities, including trend analysis and predictive models, to support scientific decision-making. The real-time alarm system area should promptly and accurately reflect anomalies, supporting rapid response and handling. The interface design should align with professional operational habits, ensuring clear data visualization and intuitive operation.",
        "style": "html {font-size: 16px; background-color: #e6eef8; color: #333;}\n.container { display: flex; justify-content: space-between; padding: 20px; height: 90vh; }\n.overview-section { width: 30%; padding: 20px; background-color: #ffffff; border-radius: 5px; overflow-y: auto; }\n.analysis-section { width: 40%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.alert-section { width: 25%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.data-display { padding: 10px; margin-bottom: 10px; border-bottom: 1px solid #ddd; }\n.alert-item { padding: 10px; background-color: #f8d7da; border-color: #f5c6cb; margin-bottom: 10px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst ProfessionalEnvironmentalMonitoringUI = () => {\n  const [stations, setStations] = useState([{ name: 'Station A', status: 'Active', location: 'Riverbank' }]);\n  const [selectedData, setSelectedData] = useState('Temperature trends over time');\n  const [alerts, setAlerts] = useState(['High water level at Station A']);\n\n  const handleSelectStation = (station) => {\n    // Logic to fetch station data\n    setSelectedData(`Data analysis for ${station}`);\n  };\n\n  return (\n    <div className='container'>\n      <div className='overview-section'>\n        {stations.map((station, index) => <div key={index} className='data-display' onClick={() => handleSelectStation(station.name)}>{station.name} - {station.status}</div>)}\n      </div>\n      <div className='analysis-section'>\n        <h2>Data Analysis</h2>\n        <p>{selectedData}</p>\n      </div>\n      <div className='alert-section'>\n        {alerts.map((alert, index) => <div key={index} className='alert-item'>{alert}</div>)}\n      </div>\n    </div>\n  );\n};\n\nexport default ProfessionalEnvironmentalMonitoringUI;"
    },
    {
        "problem_id": "000000044",
        "complexity_level": 0,
        "image": "imgs/000000044/000000044.png",
        "instruction_layout": "This page is designed as a platform for urban nightscape photography tutorials, divided into a photography skills teaching area, a photography equipment recommendation area, and a user works display area. The photography skills teaching area is on the left side of the page, providing professional nightscape photography skills videos and article tutorials. The photography equipment recommendation area is in the center of the page, recommending appropriate photography equipment for different levels of photography enthusiasts. The user works display area is on the right side of the page, showcasing nightscape photography works uploaded by users, and allowing other users to evaluate and interact.",
        "instruction_requirement": "The platform aims to provide photography enthusiasts with a professional environment for learning and sharing night photography. The photography technique teaching section needs to include rich teaching content to help users master the key techniques of night photography. The photography equipment recommendation section should provide detailed equipment information and purchase links to meet the needs of users with different budgets and technical requirements. The user work showcase section should have good interactive features to encourage users to share their work and enhance community interaction. The interface design should be artistic, with smooth operation, making it easy for new users to get started quickly.",
        "style": "html {font-size: 16px; background-color: #232323; color: #ccc;}\n.container { display: flex; justify-content: space-between; padding: 20px; height: 90vh; }\n.teaching-section { width: 30%; padding: 20px; background-color: #292929; border-radius: 5px; overflow-y: auto; }\n.equipment-section { width: 35%; padding: 20px; background-color: #333333; border-radius: 5px; }\n.gallery-section { width: 30%; padding: 20px; background-color: #292929; border-radius: 5px; }\n.course-item { padding: 10px; border-bottom: 1px solid #444; cursor: pointer; }\n.equipment-item { padding: 10px; margin-bottom: 10px; border-bottom: 1px solid #444; }\n.photo-item { padding: 10px; background-color: #333; margin-bottom: 10px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst CityNightPhotographyPlatform = () => {\n  const [courses, setCourses] = useState(['Basics of Night Photography', 'Advanced Exposure Techniques']);\n  const [equipment, setEquipment] = useState(['Tripod', 'Wide Aperture Lens']);\n  const [userPhotos, setUserPhotos] = useState(['Photo by User1', 'Photo by User2']);\n\n  return (\n    <div className='container'>\n      <div className='teaching-section'>\n        {courses.map((course, index) => <div key={index} className='course-item'>{course}</div>)}\n      </div>\n      <div className='equipment-section'>\n        {equipment.map((item, index) => <div key={index} className='equipment-item'>{item}</div>)}\n      </div>\n      <div className='gallery-section'>\n        {userPhotos.map((photo, index) => <div key={index} className='photo-item'>{photo}</div>)}\n      </div>\n    </div>\n  );\n};\n\nexport default CityNightPhotographyPlatform;"
    },
    {
        "problem_id": "000000055",
        "complexity_level": 0,
        "image": "imgs/000000055/000000055.png",
        "instruction_layout": "This page is designed as a centered task management form with a light blue background (#E3F2FD) and dark blue text color (#0D47A1). The form includes fields for task description, deadline picker, priority picker, and an \"Add Task\" button. All elements are vertically aligned, with appropriate spacing between input boxes and selectors, as well as between selectors and the button. Each field is clearly labeled above, and the \"Add Task\" button is placed at the bottom of the form.",
        "instruction_requirement": "This form is used to add to-do tasks. Users need to fill in the task description, select the deadline, and set the priority. The form should include field format validation to ensure that the task description is not empty, the deadline is valid, and the priority is selected. After submission, a confirmation message indicating that the task has been added should be displayed in the user interface. The form should support quick and efficient task entry, allowing users to manage their daily tasks.",
        "style": "body { font-family: 'Roboto', sans-serif; background-color: #E3F2FD; color: #0D47A1; }\n.form-container { display: flex; flex-direction: column; align-items: center; padding: 20px; border-radius: 8px; margin-top: 80px; background-color: #FFFFFF; box-shadow: 0 3px 6px rgba(13, 71, 161, 0.3); }\n.input, .selector { margin: 10px 0; padding: 10px; width: 300px; border: 1px solid #BBDEFB; border-radius: 5px; }\n.button { width: 150px; padding: 10px; background-color: #1E88E5; color: white; border: none; border-radius: 5px; cursor: pointer; margin-top: 15px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst TaskForm = () => {\n  const [task, setTask] = useState({ description: '', dueDate: '', priority: '' });\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (!task.description || !task.dueDate || !task.priority) {\n      alert('please fill in all blanks');\n    } else {\n      alert('task added: ' + task.description);\n      setTask({ description: '', dueDate: '', priority: '' }); // Reset form\n    }\n  };\n\n  return (\n    <div className='form-container' style={{ fontFamily: 'Roboto', backgroundColor: '#E3F2FD', color: '#0D47A1' }}> \n      <input type='text' placeholder='task description' value={task.description} onChange={e => setTask({ ...task, description: e.target.value })} className='input' />\n      <input type='date' value={task.dueDate} onChange={e => setTask({ ...task, dueDate: e.target.value })} className='input' />\n      <select value={task.priority} onChange={e => setTask({ ...task, priority: e.target.value })} className='selector'>\n        <option value=''>select priority</option>\n        <option value='High'>high</option>\n        <option value='Medium'>middle</option>\n        <option value='Low'>low</option>\n      </select>\n      <button onClick={handleSubmit} className='button'>add task</button>\n    </div>\n  );\n};\n\nexport default TaskForm;"
    },
    {
        "problem_id": "000000056",
        "complexity_level": 0,
        "image": "imgs/000000056/000000056.png",
        "instruction_layout": "This page layout includes a centrally aligned event registration form with a light pink background (#FCE4EC) and dark red text (#C2185B). The form includes fields for the participant's name, contact number, email, and checkboxes to select interested workshop topics. All elements are vertically arranged with appropriate spacing between each field, and each field is clearly labeled above. The registration button is placed at the bottom of the form.",
        "instruction_requirement": "This registration form is used to collect information from participants who wish to attend the upcoming workshops. Users are required to fill in their personal contact information and select at least one workshop topic of interest. The form should include mandatory validation, particularly in the contact information section, to ensure data integrity. After submission, the system should verify the information and confirm participation eligibility, followed by displaying a message indicating successful registration. This form aims to provide a quick and intuitive user experience to encourage more participants to sign up.",
        "style": "body { font-family: 'Lato', sans-serif; background-color: #FCE4EC; color: #C2185B; }\n.form-container { display: flex; flex-direction: column; align-items: center; padding: 25px; border-radius: 10px; margin-top: 50px; background-color: #FFFFFF; box-shadow: 0 4px 8px rgba(194, 24, 91, 0.2); }\n.input, .checkbox { margin: 15px 0; padding: 10px; width: 250px; border: 1px solid #EC407A; border-radius: 5px; }\n.button { width: 200px; padding: 12px; background-color: #AD1457; color: white; border: none; border-radius: 5px; cursor: pointer; margin-top: 20px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst EventForm = () => {\n  const [formData, setFormData] = useState({ name: '', phone: '', email: '', topics: [] });\n  const handleInputChange = (event) => {\n    const { name, value, type, checked } = event.target;\n    if (type === 'checkbox') {\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        topics: checked ? [...prevFormData.topics, value] : prevFormData.topics.filter(topic => topic !== value)\n      }));\n    } else {\n      setFormData({ ...formData, [name]: value });\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (!formData.name || !formData.phone || !formData.email || formData.topics.length === 0) {\n      alert('Please complete all required fields and select at least one topic.');\n    } else {\n      alert('Registration successful, thank you for your participation!');\n      // Additional logic to submit the data to a server can be implemented here\n    }\n  };\n\n  return (\n    <div className='form-container' style={{ fontFamily: 'Lato', backgroundColor: '#FCE4EC', color: '#C2185B' }}> \n      <input type='text' name='name' placeholder='name' value={formData.name} onChange={handleInputChange} className='input' />\n      <input type='text' name='phone' placeholder='phone' value={formData.phone} onChange={handleInputChange} className='input' />\n      <input type='email' name='email' placeholder='email' value={formData.email} onChange={handleInputChange} className='input' />\n      <div>\n        <label><input type='checkbox' name='topics' value='Art' onChange={handleInputChange} className='checkbox' />art workshop</label>\n        <label><input type='checkbox' name='topics' value='Technology' onChange={handleInputChange} className='checkbox' />tech workshop</label>\n        <label><input type='checkbox' name='topics' value='Business' onChange={handleInputChange} className='checkbox' />business workshop</label>\n      </div>\n      <button onClick={handleSubmit} className='button'>Submit registration</button>\n    </div>\n  );\n};\n\nexport default EventForm;"
    },
    {
        "problem_id": "000000057",
        "complexity_level": 0,
        "image": "imgs/000000057/000000057.png",
        "instruction_layout": "The page is designed as a centered meeting feedback survey form, with a light gray background (#ECEFF1) and dark blue text color (#29434E). The form includes multiple rating selectors to evaluate different aspects of the meeting, such as content quality, speaker performance, and overall satisfaction. Additionally, there is a text area for users to provide detailed feedback. All elements are vertically arranged, with appropriate spacing maintained between each rating selector and text area, and each field is clearly labeled above. The submit button is located at the bottom of the form.",
        "instruction_requirement": "This survey form is designed to collect participants' overall feedback on the conference. Users are required to rate various aspects of the conference based on their experience and can provide further suggestions or comments in the text area. The form should include mandatory validation to ensure that users fill out all rating fields at a minimum. After submission, the system should validate the information and confirm receipt of the feedback, followed by a message thanking the participant for their involvement. The form design should be user-friendly for quick completion while providing ample space for users to express detailed insights.",
        "style": "body { font-family: 'Open Sans', sans-serif; background-color: #ECEFF1; color: #29434E; }\n.form-container { display: flex; flex-direction: column; align-items: center; padding: 20px; border-radius: 8px; margin-top: 100px; background-color: #FFFFFF; box-shadow: 0 4px 12px rgba(41, 67, 78, 0.25); }\n.selector { margin: 10px 0; padding: 8px; width: 300px; border: 1px solid #B0BEC5; border-radius: 5px; }\n.textarea { width: 300px; height: 120px; margin-top: 10px; padding: 10px; border-radius: 5px; border: 1px solid #B0BEC5; }\n.button { width: 150px; padding: 10px; background-color: #546E7A; color: white; border: none; border-radius: 5px; cursor: pointer; margin-top: 20px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst FeedbackForm = () => {\n  const [feedback, setFeedback] = useState({ quality: '', speakers: '', satisfaction: '', comments: '' });\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFeedback(prevFeedback => ({ ...prevFeedback, [name]: value }));\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (!feedback.quality || !feedback.speakers || !feedback.satisfaction) {\n      alert('Please complete all rating items.');\n    } else {\n      alert('Thank you for your feedback!');\n      // Additional logic to submit the data to a server can be implemented here\n    }\n  };\n\n  return (\n    <div className='form-container' style={{ fontFamily: 'Open Sans', backgroundColor: '#ECEFF1', color: '#29434E' }}> \n      <select name='quality' value={feedback.quality} onChange={handleChange} className='selector'>\n        <option value=''>Rate content quality</option>\n        <option value='Excellent'>Excellent</option>\n        <option value='Good'>Good</option>\n        <option value='Average'>Average</option>\n        <option value='Poor'>Poor</option>\n      </select>\n      <select name='speakers' value={feedback.speakers} onChange={handleChange} className='selector'>\n        <option value=''>Rate speaker performance</option>\n        <option value='Excellent'>Excellent</option>\n        <option value='Good'>Good</option>\n        <option value='Average'>Average</option>\n        <option value='Poor'>Poor</option>\n      </select>\n      <select name='satisfaction' value={feedback.satisfaction} onChange={handleChange} className='selector'>\n        <option value=''>Rate overall satisfaction</option>\n        <option value='Excellent'>Excellent</option>\n        <option value='Good'>Good</option>\n        <option value='Average'>Average</option>\n        <option value='Poor'>Poor</option>\n      </select>\n      <textarea name='comments' placeholder='Additional suggestions or comments' value={feedback.comments} onChange={handleChange} className='textarea'></textarea>\n      <button onClick={handleSubmit} className='button'>Submit feedback</button>\n    </div>\n  );\n};\n\nexport default FeedbackForm;"
    },
    {
        "problem_id": "000000058",
        "complexity_level": 0,
        "image": "imgs/000000058/000000058.png",
        "instruction_layout": "This page is designed as a centered restaurant reservation form with a warm orange background color (#FFCCBC) and dark brown text color (#5D4037). The form includes input fields for customer name, reservation date and time, and number of people. Additionally, there is a dropdown selector for choosing the table type. All elements are vertically arranged with appropriate spacing between each field, and each field has a clear label above it. The submit button is placed at the bottom of the form.",
        "instruction_requirement": "This reservation form is designed to facilitate users in booking restaurant tables. Users are required to fill in their name, select the reservation date and time, and specify the number of diners and table type. The form should include input validation, such as ensuring the date is not in the past and the number of people is a positive integer. After submission, the system should confirm the reservation details and send a notification to the user upon successful booking. The form design should be simple and efficient, ensuring users can complete the reservation quickly and accurately.",
        "style": "body { font-family: 'Georgia', serif; background-color: #FFCCBC; color: #5D4037; }\n.form-container { display: flex; flex-direction: column; align-items: center; padding: 30px; border-radius: 12px; margin-top: 60px; background-color: #FFFFFF; box-shadow: 0 4px 12px rgba(93, 64, 55, 0.3); }\n.input { margin: 12px 0; padding: 12px; width: 250px; border: 2px solid #8D6E63; border-radius: 6px; }\n.selector { padding: 12px; border-radius: 6px; background-color: #FBE9E7; color: #5D4037; }\n.button { width: 180px; padding: 15px; background-color: #795548; color: white; border: none; border-radius: 6px; cursor: pointer; margin-top: 15px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst ReservationForm = () => {\n  const [reservation, setReservation] = useState({ name: '', date: '', time: '', guests: 0, tableType: '' });\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setReservation(prevReservation => ({ ...prevReservation, [name]: value }));\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (!reservation.name || !reservation.date || !reservation.time || reservation.guests <= 0 || !reservation.tableType) {\n      alert('Please fill in all required fields and ensure the information is correct.');\n    } else {\n      alert('Your reservation has been successfully made! We look forward to your visit.');\n      // Logic to handle reservation submission can be added here\n    }\n  };\n\n  return (\n    <div className='form-container' style={{ fontFamily: 'Georgia', backgroundColor: '#FFCCBC', color: '#5D4037' }}> \n      <input type='text' name='name' placeholder='name' value={reservation.name} onChange={handleInputChange} className='input' />\n      <input type='date' name='date' value={reservation.date} onChange={handleInputChange} className='input' />\n      <input type='time' name='time' value={reservation.time} onChange={handleInputChange} className='input' />\n      <input type='number' name='guests' placeholder='number of guests' value={reservation.guests} onChange={handleInputChange} className='input' />\n      <select name='tableType' value={reservation.tableType} onChange={handleInputChange} className='selector'>\n        <option value=''>Select table type</option>\n        <option value='Window'>Window</option>\n        <option value='Center'>Center</option>\n        <option value='Private'>Private</option>\n      </select>\n      <button onClick={handleSubmit} className='button'>Submit reservation</button>\n    </div>\n  );\n};\n\nexport default ReservationForm;"
    },
    {
        "problem_id": "000000060",
        "complexity_level": 0,
        "image": "imgs/000000060/000000060.png",
        "instruction_layout": "This page is designed as a centered online webinar registration form with a light purple background (#EDE7F6) and dark purple text color (#512DA8). The form includes input fields for participants to fill in their name, email, select a webinar topic, and a radio button group to choose the participation method (online or in-person). All elements are vertically arranged with appropriate spacing between each field, and each field has a clear label above it. The submit button is placed at the bottom of the form.",
        "instruction_requirement": "This registration form is designed to facilitate user registration for an upcoming online seminar. Users are required to fill in their name, email address, and select the seminar topic they wish to attend from a dropdown list. Users must also choose their participation method, either online or in-person. The form should include input validation, such as the correctness of the email format, and ensure that users have selected a seminar topic and participation method. After submission, the system should verify the information and send a confirmation email to the user's specified email address. The form design should focus on user experience, ensuring the process is simple and intuitive.",
        "style": "body { font-family: 'Arial', sans-serif; background-color: #EDE7F6; color: #512DA8; }\n.form-container { display: flex; flex-direction: column; align-items: center; padding: 20px; border-radius: 8px; margin-top: 50px; background-color: #FFFFFF; box-shadow: 0 3px 6px rgba(81, 45, 168, 0.3); }\n.input { margin: 10px 0; padding: 8px; width: 300px; border: 1px solid #9575CD; border-radius: 4px; }\n.selector, .radio { padding: 8px; margin: 10px 0; }\n.button { width: 200px; padding: 12px; background-color: #673AB7; color: white; border: none; border-radius: 5px; cursor: pointer; margin-top: 15px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst WorkshopForm = () => {\n  const [entry, setEntry] = useState({ name: '', email: '', topic: '', attendance: '' });\n  const handleChange = (event) => {\n    const { name, value, type, checked } = event.target;\n    if (type === 'radio') {\n      setEntry(prevEntry => ({ ...prevEntry, [name]: checked ? value : prevEntry[name] }));\n    } else {\n      setEntry({ ...entry, [name]: value });\n    }\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (!entry.name || !entry.email.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/) || !entry.topic || !entry.attendance) {\n      alert('Please ensure all fields are filled correctly and select an attendance method.');\n    } else {\n      alert('Thank you for registering for our workshop! A confirmation email has been sent to your inbox.');\n      // Additional logic to submit the data to a server can be added here\n    }\n  };\n\n  return (\n    <div className='form-container' style={{ fontFamily: 'Arial', backgroundColor: '#EDE7F6', color: '#512DA8' }}> \n      <input type='text' name='name' placeholder='name' value={entry.name} onChange={handleChange} className='input' />\n      <input type='email' name='email' placeholder='email' value={entry.email} onChange={handleChange} className='input' />\n      <select name='topic' value={entry.topic} onChange={handleChange} className='selector'>\n        <option value=''>Select workshop topic</option>\n        <option value='Tech'>Tech</option>\n        <option value='Business'>Business</option>\n        <option value='Health'>Health</option>\n      </select>\n      <div className='radio'>\n        <label><input type='radio' name='attendance' value='Online' checked={entry.attendance === 'Online'} onChange={handleChange} /> Online participation</label>\n        <label><input type='radio' name='attendance' value='Onsite' checked={entry.attendance === 'Onsite'} onChange={handleChange} /> Onsite participation</label>\n      </div>\n      <button onClick={handleSubmit} className='button'>Submit registration</button>\n    </div>\n  );\n};\n\nexport default WorkshopForm;"
    },
    {
        "problem_id": "000000061",
        "complexity_level": 0,
        "image": "imgs/000000061/000000061.png",
        "instruction_layout": "This page is designed as a centered online course registration form with a light blue background (#E1F5FE) and navy blue text color (#0D47A1). The form includes input fields for entering the student's name, email, selecting the course level, and a slider to choose the age range. All elements are vertically arranged with appropriate spacing between each field, and each field has a clear label above it. The submit button is placed at the bottom of the form.",
        "instruction_requirement": "This registration form is designed to facilitate student enrollment in online courses. Users are required to fill in their name, email address, and select a course level from a dropdown list. Users must also choose their age range using a slider. The form should include input validation, such as the correctness of the email format, and ensure that users have selected a course level and set their age range correctly. After submission, the system should verify the information and send a registration confirmation email to the user's specified email address. The form design should focus on user experience, ensuring a simple and intuitive process while guiding users through all necessary steps.",
        "style": "body { font-family: 'Calibri', sans-serif; background-color: #E1F5FE; color: #0D47A1; }\n.form-container { display: flex; flex-direction: column; align-items: center; padding: 20px; border-radius: 8px; margin-top: 60px; background-color: #FFFFFF; box-shadow: 0 3px 7px rgba(13, 71, 161, 0.2); }\n.input, .selector, .slider { margin: 10px 0; padding: 8px; width: 280px; border: 1px solid #BBDEFB; border-radius: 5px; }\n.button { width: 180px; padding: 12px; background-color: #1976D2; color: white; border: none; border-radius: 5px; cursor: pointer; margin-top: 20px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst CourseForm = () => {\n  const [studentInfo, setStudentInfo] = useState({ name: '', email: '', courseLevel: '', ageRange: 20 });\n  const handleChange = (event) => {\n    const { name, value, type } = event.target;\n    setStudentInfo({ ...studentInfo, [name]: value });\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (!studentInfo.name || !studentInfo.email.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/) || !studentInfo.courseLevel) {\n      alert('Please ensure all fields are filled correctly.');\n    } else {\n      alert('Thank you for registering for our course! A confirmation email has been sent to your inbox.');\n      // Additional logic to submit the data to a server can be added here\n    }\n  };\n\n  return (\n    <div className='form-container' style={{ fontFamily: 'Calibri', backgroundColor: '#E1F5FE', color: '#0D47A1' }}> \n      <input type='text' name='name' placeholder='name' value={studentInfo.name} onChange={handleChange} className='input' />\n      <input type='email' name='email' placeholder='email' value={studentInfo.email} onChange={handleChange} className='input' />\n      <select name='courseLevel' value={studentInfo.courseLevel} onChange={handleChange} className='selector'>\n        <option value=''>Select Course Level</option>\n        <option value='Beginner'>Beginner</option>\n        <option value='Intermediate'>Intermediate</option>\n        <option value='Advanced'>Advanced</option>\n      </select>\n      <input type='range' name='ageRange' min='10' max='60' value={studentInfo.ageRange} onChange={handleChange} className='slider' />\n      <button onClick={handleSubmit} className='button'>Submit Registration</button>\n    </div>\n  );\n};\n\nexport default CourseForm;"
    },
    {
        "problem_id": "000000064",
        "complexity_level": 0,
        "image": "imgs/000000064/000000064.png",
        "instruction_layout": "This component is designed as an 'Interactive Local Recipe Book', providing a visually appealing slider to display traditional recipes. The background color is a warm cream (#F3E5F5), with text in deep purple (#6A1B9A). Each slide shows a recipe with its name, an image of the dish, ingredients, and cooking instructions.",
        "instruction_requirement": "The component aims to foster a deeper connection with local culinary traditions by presenting a variety of recipes. It should allow users to cycle through different recipes using navigation buttons. All data is hard-coded to ensure the component can be directly integrated into any React project without external dependencies.",
        "style": "body { font-family: 'Lato', sans-serif; background-color: #F3E5F5; color: #6A1B9A; }\n.recipe-slider { display: flex; align-items: center; justify-content: center; padding: 20px; border-radius: 8px; background-color: #E1BEE7; margin: auto; width: 80%; box-shadow: 0 4px 8px rgba(122, 77, 128, 0.6); }\n.recipe-card { text-align: center; padding: 20px; width: 300px; background-color: #CE93D8; border-radius: 4px; margin: 0 15px; }\n.recipe-image { width: 100%; height: 200px; object-fit: cover; border-radius: 4px; margin-bottom: 10px; }\n.nav-button { background: none; border: none; color: #6A1B9A; font-size: 24px; cursor: pointer; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst recipes = [\n  { id: 1, title: 'Local Stew', image: 'path/to/image1.jpg', ingredients: ['Onions', 'Tomatoes', 'Beef'], instructions: 'Cook all ingredients for 2 hours.' },\n  { id: 2, title: 'Traditional Pie', image: 'path/to/image2.jpg', ingredients: ['Flour', 'Butter', 'Apples'], instructions: 'Bake the pie for 45 minutes.' },\n  { id: 3, title: 'Community Soup', image: 'path/to/image3.jpg', ingredients: ['Carrots', 'Potatoes', 'Chicken'], instructions: 'Simmer on low heat for 3 hours.' }\n];\n\nconst RecipeBook = () => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const nextRecipe = () => setCurrentIndex((currentIndex + 1) % recipes.length);\n  const prevRecipe = () => setCurrentIndex((currentIndex - 1 + recipes.length) % recipes.length);\n\n  return (\n    <div className='recipe-slider' style={{ fontFamily: 'Lato', backgroundColor: '#F3E5F5', color: '#6A1B9A' }}>\n      <button className='nav-button' onClick={prevRecipe}>&lt;</button>\n      <div className='recipe-card'>\n        <img src={recipes[currentIndex].image} alt={recipes[currentIndex].title} className='recipe-image' />\n        <h3>{recipes[currentIndex].title}</h3>\n        <p>Ingredients: {recipes[currentIndex].ingredients.join(', ')}</p>\n        <p>Instructions: {recipes[currentIndex].instructions}</p>\n      </div>\n      <button className='nav-button' onClick={nextRecipe}>&gt;</button>\n    </div>\n  );\n};\n\nexport default RecipeBook;"
    },
    {
        "problem_id": "000000065",
        "complexity_level": 0,
        "image": "imgs/000000065/000000065.png",
        "instruction_layout": "This component is a 'Local Music Playlist' that allows users to explore and play music tracks from local artists directly within the component. The background color is a soothing navy blue (#283593), with text in light grey (#ECEFF1). Each track in the list includes the track name, artist, and a play button.",
        "instruction_requirement": "The component is designed to promote local artists by providing a user-friendly interface to play their music. It should display a list of tracks, each with a play button that plays a short snippet of the song embedded directly in the component. The design should focus on ease of use and accessibility, ensuring users can interact with the music effortlessly.",
        "style": "body { font-family: 'Roboto', sans-serif; background-color: #283593; color: #ECEFF1; }\n.playlist-container { display: flex; flex-direction: column; align-items: center; padding: 20px; border-radius: 8px; background-color: #1A237E; width: 80%; margin: auto; margin-top: 20px; }\n.track-item { text-align: center; padding: 10px; margin: 5px; background-color: #3949AB; border-radius: 4px; width: 90%; }\n.play-button { background: none; border: none; color: #ECEFF1; font-size: 16px; cursor: pointer; }",
        "file_type": "js",
        "component": "import React from 'react';\n\nconst tracks = [\n  { id: 1, title: 'Hometown Blues', artist: 'Local Band', audioSrc: 'path/to/audio1.mp3' },\n  { id: 2, title: 'City Lights', artist: 'Singer Songwriter', audioSrc: 'path/to/audio2.mp3' },\n  { id: 3, title: 'Suburban Dreams', artist: 'Indie Group', audioSrc: 'path/to/audio3.mp3' }\n];\n\nconst MusicPlaylist = () => {\n  const playAudio = (src) => {\n    const audio = new Audio(src);\n    audio.play();\n  };\n\n  return (\n    <div className='playlist-container'>\n      {tracks.map(track => (\n        <div key={track.id} className='track-item'>\n          <h3>{track.title} - {track.artist}</h3>\n          <button className='play-button' onClick={() => playAudio(track.audioSrc)}>Play</button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default MusicPlaylist;"
    },
    {
        "problem_id": "000000068",
        "complexity_level": 0,
        "image": "imgs/000000068/000000068.png",
        "instruction_layout": "This component is a 'Local Event Countdown Widget' designed to showcase an upcoming significant community event. The design includes a minimalist aesthetic with a primary color palette of dark blue (#283593) and accent colors in light grey (#CFD8DC). The widget will display the name of the event, a short description, and a countdown timer that ticks down to the event start date and time.",
        "instruction_requirement": "The purpose of this widget is to generate excitement and anticipation for community events by providing a visually engaging countdown. The component should include static data for an upcoming event and a live countdown that updates every second. It should be easy to integrate into any community website, with high visibility and user interaction to attract engagement.",
        "style": "body { font-family: 'Arial', sans-serif; background-color: #283593; color: #CFD8DC; }\n.countdown-container { display: flex; flex-direction: column; align-items: center; padding: 20px; border-radius: 8px; background-color: #3949AB; width: 300px; margin: 20px auto; box-shadow: 0 4px 8px rgba(40, 53, 147, 0.5); }\n.event-name { font-size: 18px; font-weight: bold; margin-bottom: 10px; }\n.event-description { font-size: 14px; margin-bottom: 20px; }\n.timer { font-size: 24px; font-weight: bold; }",
        "file_type": "js",
        "component": "import React, { useState, useEffect } from 'react';\n\nconst eventInfo = {\n  name: 'Community Festival',\n  description: 'Join us for the annual community festival with food, music, and games!',\n  dateTime: '2024-10-01T12:00:00'\n};\n\nconst CountdownWidget = () => {\n  const [timeLeft, setTimeLeft] = useState('');\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const now = new Date();\n      const eventDate = new Date(eventInfo.dateTime);\n      const difference = eventDate - now;\n      const days = Math.floor(difference / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((difference / (1000 * 60 * 60)) % 24);\n      const minutes = Math.floor((difference / 1000 / 60) % 60);\n      const seconds = Math.floor((difference / 1000) % 60);\n      setTimeLeft(`${days} days ${hours} hours ${minutes} minutes ${seconds} seconds`);\n      if (difference < 0) {\n        clearInterval(timer);\n        setTimeLeft('Event has started!');\n      }\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <div className='countdown-container'>\n      <div className='event-name'>{eventInfo.name}</div>\n      <div className='event-description'>{eventInfo.description}</div>\n      <div className='timer'>{timeLeft}</div>\n    </div>\n  );\n};\n\nexport default CountdownWidget;"
    },
    {
        "problem_id": "000000069",
        "complexity_level": 0,
        "image": "imgs/000000069/000000069.png",
        "instruction_layout": "This component is designed as a 'Local Wildlife Spotting Log' that provides an interface for community members to log and view wildlife sightings. It features a minimalist design with a nature-inspired color scheme of green (#388E3C) and earth tones (#8D6E63). Users can input details of their wildlife sightings and see a list of recent entries.",
        "instruction_requirement": "The component is aimed at fostering a connection with the local environment by enabling users to record sightings of animals, birds, or other wildlife. It should allow users to enter details of the sighting such as date, time, and a brief description. The component should also display a scrollable list of recent sightings, each entry showing the details mentioned above. It should be user-friendly and encourage regular usage by community members.",
        "style": "body { font-family: 'Arial', sans-serif; background-color: #388E3C; color: #FFFFFF; }\n.log-container { display: flex; flex-direction: column; align-items: center; padding: 20px; border-radius: 8px; background-color: #4CAF50; width: 90%; margin: 20px auto; box-shadow: 0 4px 8px rgba(56, 142, 60, 0.5); }\n.entry-form { width: 100%; margin-bottom: 20px; }\n.input-field { width: 100%; padding: 8px; margin-bottom: 10px; border-radius: 4px; }\n.entry-list { width: 100%; overflow-y: auto; max-height: 300px; }\n.entry-item { background-color: #8D6E63; margin: 5px; padding: 10px; border-radius: 4px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst initialEntries = [\n  { date: '2024-09-28', time: '15:30', description: 'Spotted a red fox in the woods.' }\n];\n\nconst WildlifeLog = () => {\n  const [entries, setEntries] = useState(initialEntries);\n  const [newEntry, setNewEntry] = useState({ date: '', time: '', description: '' });\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setNewEntry({ ...newEntry, [name]: value });\n  };\n\n  const addEntry = () => {\n    if (newEntry.date && newEntry.time && newEntry.description) {\n      setEntries([...entries, newEntry]);\n      setNewEntry({ date: '', time: '', description: '' });\n    }\n  };\n\n  return (\n    <div className='log-container'>\n      <div className='entry-form'>\n        <input type='date' name='date' value={newEntry.date} onChange={handleInputChange} className='input-field' />\n        <input type='time' name='time' value={newEntry.time} onChange={handleInputChange} className='input-field' />\n        <input type='text' name='description' placeholder='Describe the sighting...' value={newEntry.description} onChange={handleInputChange} className='input-field' />\n        <button onClick={addEntry} style={{ width: '100%', padding: 10, borderRadius: 4, cursor: 'pointer', backgroundColor: '#81C784' }}>Add Entry</button>\n      </div>\n      <div className='entry-list'>\n        {entries.map((entry, index) => (\n          <div key={index} className='entry-item'>\n            <strong>{entry.date} at {entry.time}</strong>\n            <p>{entry.description}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default WildlifeLog;"
    },
    {
        "problem_id": "000000072",
        "complexity_level": 0,
        "image": "imgs/000000072/000000072.png",
        "instruction_layout": "This component is a 'Local Craft Showcase' designed to display local artisan crafts in an interactive gallery format. The background color is earthy beige (#F5F5DC), with each craft item displayed on a card with an image, the craft's name, and a brief description. The layout is grid-based to showcase multiple crafts simultaneously.",
        "instruction_requirement": "The component's aim is to promote local artisans by providing a visually appealing showcase of their crafts. It should allow users to view detailed images and descriptions of each item, arranged in a responsive grid format. The gallery should provide an easy and engaging way for users to learn about local crafts, enhancing community engagement and support for local artisans.",
        "style": "body { font-family: 'Verdana', sans-serif; background-color: #F5F5DC; color: #333; }\n.showcase-container { display: grid; grid-template-columns: repeat(auto-fill, minmax(240px, 1fr)); gap: 15px; padding: 20px; margin: auto; max-width: 960px; }\n.craft-card { background-color: #FFF8DC; border: solid 1px #DEB887; border-radius: 8px; padding: 10px; text-align: center; }\n.craft-image { width: 100%; height: 200px; object-fit: cover; border-radius: 4px; }",
        "file_type": "js",
        "component": "import React from 'react';\n\nconst crafts = [\n  { id: 1, name: 'Handwoven Baskets', description: 'Beautifully woven baskets from natural fibers.', image: 'path/to/basket.jpg' },\n  { id: 2, name: 'Pottery Vases', description: 'Elegant pottery vases crafted from local clay.', image: 'path/to/vase.jpg' },\n  { id: 3, name: 'Handmade Jewelry', description: 'Unique jewelry pieces made from recycled materials.', image: 'path/to/jewelry.jpg' }\n];\n\nconst CraftShowcase = () => {\n  return (\n    <div className='showcase-container'>\n      {crafts.map(craft => (\n        <div key={craft.id} className='craft-card'>\n          <img src={craft.image} alt={craft.name} className='craft-image' />\n          <h3>{craft.name}</h3>\n          <p>{craft.description}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CraftShowcase;"
    },
    {
        "problem_id": "000000003",
        "complexity_level": 1,
        "image": "imgs/000000003/000000003.png",
        "instruction_layout": "The page layout is for a user information management system, featuring a user search bar and a user table. The search bar is located at the top of the page with a light gray (#f0f0f0) background, containing an input box and a search button. The button is blue (#007bff) and turns dark blue (#0056b3) on hover. Below the search bar is the user table, with a black header and a white background, consisting of four columns: Username, Email, Registration Date, and Actions. Each row displays the corresponding user information, and the Actions column includes Edit and Delete buttons, which show a shadow effect on hover. The bottom of the page displays copyright information, centered.",
        "instruction_requirement": "The page needs to implement a user information management system, including a search bar and a user information table. The search bar should allow users to enter a username and perform a search, with the button having a hover effect. The user table should display multiple user information entries, with each row showing the username, email, registration date, and an actions column. The actions column contains edit and delete buttons, which should have a shadow effect when hovered over. The bottom of the page needs to include copyright information.",
        "style": "html {font-size: 16px; background-color: white; color: #333;}\n.header { background-color: #f0f0f0; padding: 20px; text-align: center; }\n.search-bar { display: flex; justify-content: center; margin-bottom: 20px; }\n.input { padding: 10px; width: 50%; border: 1px solid #ccc; border-radius: 4px; }\n.button { background-color: #007bff; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer; }\n.button:hover { background-color: #0056b3; }\n.table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }\n.table th, .table td { border: 1px solid #ddd; padding: 10px; text-align: left; }\n.table th { background-color: #333; color: white; }\n.action-button { background-color: #28a745; color: white; padding: 5px 10px; border: none; border-radius: 4px; cursor: pointer; }\n.action-button:hover { background-color: #218838; }\n.footer { text-align: center; font-size: 12px; color: #333; margin-top: 20px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst UserTable = ({ users, onEdit, onDelete }) => {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th>Username</th>\n          <th>Email</th>\n          <th>Registration Date</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {users.map((user, index) => (\n          <tr key={index}>\n            <td>{user.username}</td>\n            <td>{user.email}</td>\n            <td>{user.registrationDate}</td>\n            <td>\n              <button className=\"action-button\" onClick={() => onEdit(user)}>Edit</button>\n              <button className=\"action-button\" onClick={() => onDelete(user)}>Delete</button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst App = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const users = [\n    { username: 'john_doe', email: 'john@example.com', registrationDate: '2023-01-15' },\n    { username: 'jane_smith', email: 'jane@example.com', registrationDate: '2023-02-10' },\n    { username: 'alice_jones', email: 'alice@example.com', registrationDate: '2023-03-05' }\n  ];\n\n  const handleEdit = (user) => {\n    console.log('Edit user:', user);\n  };\n\n  const handleDelete = (user) => {\n    console.log('Delete user:', user);\n  };\n\n  return (\n    <div>\n      <div className=\"header\">\n        <h1>User Management</h1>\n      </div>\n      <div className=\"search-bar\">\n        <input\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search by username...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n        <button className=\"button\">Search</button>\n      </div>\n      <UserTable users={users.filter(user => user.username.includes(searchTerm))} onEdit={handleEdit} onDelete={handleDelete} />\n      <div className=\"footer\">\n        <p>&copy; 2024 User Management System</p>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"
    },
    {
        "problem_id": "000000004",
        "complexity_level": 1,
        "image": "imgs/000000004/000000004.png",
        "instruction_layout": "The page layout is for a customer feedback collection system, featuring a feedback form and a feedback list. The feedback form is located at the top of the page with a light blue background (#e3f2fd), containing three input fields (customer name, email, and feedback content) and a submit button. The button is green (#4caf50) and turns dark green (#388e3c) on hover. The feedback list is below the form with a white background, including a header and feedback items. The header is dark blue and displays the title 'Feedback List'. Each feedback item includes the customer's name, email, and feedback content, with the copyright information centered at the bottom.",
        "instruction_requirement": "This page needs to implement a customer feedback collection system, including a feedback form and a feedback list. The form should allow users to input their name, email, and feedback content, with buttons having a hover effect. The feedback list should display all submitted feedback information, with each feedback item showing the customer's name, email, and feedback content. The bottom of the page should include copyright information.",
        "style": "html {font-size: 16px; background-color: white; color: #333;}\n.header { background-color: #e3f2fd; padding: 20px; text-align: center; }\n.form { display: flex; flex-direction: column; align-items: center; margin-bottom: 20px; }\n.input { padding: 10px; width: 300px; margin: 10px 0; border: 1px solid #ccc; border-radius: 4px; }\n.button { background-color: #4caf50; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer; }\n.button:hover { background-color: #388e3c; }\n.feedback-list { width: 100%; margin: 0 auto; text-align: center; }\n.feedback-item { border: 1px solid #ddd; padding: 10px; margin: 5px 0; }\n.footer { text-align: center; font-size: 12px; color: #333; margin-top: 20px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst FeedbackList = ({ feedbacks }) => {\n  return (\n    <div className=\"feedback-list\">\n      <h2>Feedback List</h2>\n      {feedbacks.map((feedback, index) => (\n        <div key={index} className=\"feedback-item\">\n          <strong>{feedback.name}</strong> <em>({feedback.email})</em>\n          <p>{feedback.message}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst App = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [feedbacks, setFeedbacks] = useState([]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setFeedbacks([...feedbacks, { name, email, message }]);\n    setName('');\n    setEmail('');\n    setMessage('');\n  };\n\n  return (\n    <div>\n      <div className=\"header\">\n        <h1>Customer Feedback</h1>\n      </div>\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Your Name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          required\n        />\n        <input\n          type=\"email\"\n          className=\"input\"\n          placeholder=\"Your Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n        <textarea\n          className=\"input\"\n          placeholder=\"Your Feedback\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          required\n        />\n        <button className=\"button\">Submit</button>\n      </form>\n      <FeedbackList feedbacks={feedbacks} />\n      <div className=\"footer\">\n        <p>&copy; 2024 Customer Feedback System</p>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"
    },
    {
        "problem_id": "000000005",
        "complexity_level": 1,
        "image": "imgs/000000005/000000005.png",
        "instruction_layout": "The page layout is a simple to-do app, featuring a task input area and a task list. The input area is at the top of the page with a light green background (#e8f5e9), containing a text input box and an add button. The button is purple (#9c27b0) and turns dark purple (#7b1fa2) on hover. The task list is below the input area with a white background, including a header and task items. The header is dark green and displays the title 'To-Do List'. Each task item shows the task name and a delete button, which changes color on hover. The bottom of the page has copyright information centered.",
        "instruction_requirement": "This page requires the implementation of a to-do list application, including a task input area and a task list. Users should be able to input task names in the input box and add them to the list, with the add button having a hover effect. The task list should display all added tasks, with each task item showing the task name and a delete button. Users should be able to remove the task by clicking the delete button. The bottom of the page needs to include copyright information.",
        "style": "html {font-size: 16px; background-color: white; color: #333;}\n.header { background-color: #e8f5e9; padding: 20px; text-align: center; }\n.input-area { display: flex; justify-content: center; margin-bottom: 20px; }\n.input { padding: 10px; width: 300px; margin-right: 10px; border: 1px solid #ccc; border-radius: 4px; }\n.add-button { background-color: #9c27b0; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer; }\n.add-button:hover { background-color: #7b1fa2; }\n.todo-list { width: 100%; margin: 0 auto; }\n.todo-item { border: 1px solid #ddd; padding: 10px; margin: 5px 0; display: flex; justify-content: space-between; }\n.delete-button { background-color: #f44336; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer; }\n.delete-button:hover { background-color: #d32f2f; }\n.footer { text-align: center; font-size: 12px; color: #333; margin-top: 20px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst TodoList = ({ tasks, onDelete }) => {\n  return (\n    <div className=\"todo-list\">\n      <h2>To-Do List</h2>\n      {tasks.map((task, index) => (\n        <div key={index} className=\"todo-item\">\n          {task}\n          <button className=\"delete-button\" onClick={() => onDelete(index)}>Delete</button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst App = () => {\n  const [task, setTask] = useState('');\n  const [tasks, setTasks] = useState([]);\n\n  const handleAddTask = (e) => {\n    e.preventDefault();\n    if (task) {\n      setTasks([...tasks, task]);\n      setTask('');\n    }\n  };\n\n  const handleDeleteTask = (index) => {\n    const newTasks = tasks.filter((_, i) => i !== index);\n    setTasks(newTasks);\n  };\n\n  return (\n    <div>\n      <div className=\"header\">\n        <h1>To-Do List Application</h1>\n      </div>\n      <form className=\"input-area\" onSubmit={handleAddTask}>\n        <input\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Add a new task\"\n          value={task}\n          onChange={(e) => setTask(e.target.value)}\n          required\n        />\n        <button className=\"add-button\">Add</button>\n      </form>\n      <TodoList tasks={tasks} onDelete={handleDeleteTask} />\n      <div className=\"footer\">\n        <p>&copy; 2024 Todo Application</p>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"
    },
    {
        "problem_id": "000000006",
        "complexity_level": 1,
        "image": "imgs/000000006/000000006.png",
        "instruction_layout": "A book search application, featuring a search bar and a results display area. The search bar is located at the top of the page, with a light blue background (#e3f2fd), containing an input box and a search button. The button is green (#4caf50) and turns dark green (#388e3c) on hover. The results display area is below the search bar, with a white background, including a header and search result items. The header is blue and displays the title 'Search Results'. Each search result item contains the book title and author, with a clear button at the bottom, centered.",
        "instruction_requirement": "This page requires the implementation of a book search application, including a search box and a results display area. Users should be able to enter book titles in the input box and perform searches, with the search button having a hover effect. The results display area should show the information of the books found, including the title and author. Users can click the clear button to clear the search results. The bottom of the page needs to include copyright information.",
        "style": "html {font-size: 16px; background-color: white; color: #333;}\n.header { background-color: #e3f2fd; padding: 20px; text-align: center; }\n.search-area { display: flex; justify-content: center; margin-bottom: 20px; }\n.input { padding: 10px; width: 300px; margin-right: 10px; border: 1px solid #ccc; border-radius: 4px; }\n.search-button { background-color: #4caf50; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer; }\n.search-button:hover { background-color: #388e3c; }\n.wrapper{box-sizing: border-box; width: 100%; margin: 0 auto; text-align: center; padding: 0 20%;}\n.results-list { width: 100%; margin: 0 auto; }\n.result-item { border: 1px solid #ddd; padding: 10px; margin: 5px 0; }\n.clear-button { background-color: #f44336; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer; }\n.clear-button:hover { background-color: #d32f2f; }\n.footer { text-align: center; font-size: 12px; color: #333; margin-top: 20px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst ResultsList = ({ results }) => {\n  return (\n    <div className=\"results-list\">\n      <h2>Search Results</h2>\n      {results.length === 0 ? <p>No results found.</p> : results.map((book, index) => (\n        <div key={index} className=\"result-item\">\n          <strong>{book.title}</strong> by {book.author}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst App = () => {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    const mockResults = [\n      { title: '1984', author: 'George Orwell' },\n      { title: 'To Kill a Mockingbird', author: 'Harper Lee' }\n    ];\n    setResults(mockResults.filter(book => book.title.toLowerCase().includes(query.toLowerCase())));\n  };\n\n  const handleClear = () => {\n    setResults([]);\n    setQuery('');\n  };\n\n  return (\n    <div>\n      <div className=\"header\">\n        <h1>Book Search Application</h1>\n      </div>\n      <form className=\"search-area\" onSubmit={handleSearch}>\n        <input\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search for a book\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          required\n        />\n        <button className=\"search-button\">Search</button>\n      </form>\n      <div className=\"wrapper\">\n        <ResultsList results={results} />\n        <button className=\"clear-button\" onClick={handleClear}>Clear Results</button>\n      </div>\n      <div className=\"footer\">\n        <p>&copy; 2024 Book Search Application</p>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"
    },
    {
        "problem_id": "000000007",
        "complexity_level": 1,
        "image": "imgs/000000007/000000007.png",
        "instruction_layout": "A weather forecast app featuring a city selector, date selector, and weather information display area. The city selector is at the top of the page with a pale yellow (#fff9c4) background, including a dropdown menu and a search button, which is blue (#2196f3) and turns dark blue (#1976d2) on hover. The date selector is below the city selector with a white background, allowing users to select a date. The weather information display area is below the date selector with a light gray (#f1f1f1) background, showing the current weather conditions, temperature, and wind speed, each with corresponding icons, and a centered update button at the bottom.",
        "instruction_requirement": "This page requires the implementation of a weather forecast application where users can select a city and date to view weather information. The city selector should include multiple city options, and the date selector should allow users to choose a date within the next week. When the user clicks the search button, the corresponding weather information should be displayed, including temperature, weather conditions, and wind speed, with all information clearly presented and accompanied by relevant icons. The page should also include an update button at the bottom, which, when clicked, should re-fetch the weather information.",
        "style": "html {font-size: 16px; background-color: white; color: #333;}\n.header { background-color: #fff9c4; padding: 20px; text-align: center; }\n.selector-area { display: flex; justify-content: center; margin-bottom: 20px; }\n.select { padding: 10px; margin-right: 10px; border: 1px solid #ccc; border-radius: 4px; }\n.search-button { background-color: #2196f3; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer; }\n.search-button:hover { background-color: #1976d2; }\n.wrapper{width: 100%; box-sizing: border-box; padding: 0 20%; text-align: center; }\n.weather-info { background-color: #f1f1f1; padding: 20px; text-align: center; border-radius: 4px; }\n.update-button { background-color: #4caf50; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer; margin-top: 20px; }\n.update-button:hover { background-color: #388e3c; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst WeatherInfo = ({ weather }) => {\n  if (!weather) return <p>Please select a city and date first.</p>;\n  return (\n    <div className=\"weather-info\">\n      <h2>Weather Information</h2>\n      <p>city: {weather.city}</p>\n      <p>date: {weather.date}</p>\n      <p>tempearture: {weather.temperature}°C</p>\n      <p>weather: {weather.condition}</p>\n      <p>wind speed: {weather.windSpeed} km/h</p>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [city, setCity] = useState('');\n  const [date, setDate] = useState('');\n  const [weather, setWeather] = useState(null);\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    const mockWeather = {\n      city: city,\n      date: date,\n      temperature: Math.floor(Math.random() * 30),\n      condition: 'sunny',\n      windSpeed: Math.floor(Math.random() * 20)\n    };\n    setWeather(mockWeather);\n  };\n\n  const handleUpdate = () => {alert('Weather information has been updated.');};\n\n  return (\n    <div>\n      <div className=\"header\">\n        <h1>Weather Forecast</h1>\n      </div>\n      <form className=\"selector-area\" onSubmit={handleSearch}>\n        <select className=\"select\" value={city} onChange={(e) => setCity(e.target.value)} required>\n          <option value=\"\">Select city</option>\n          <option value=\"Beijing\">Beijing</option>\n          <option value=\"Shanghai\">Shanghai</option>\n          <option value=\"Guangzhou\">Guangzhou</option>\n        </select>\n        <input\n          type=\"date\"\n          className=\"select\"\n          value={date}\n          onChange={(e) => setDate(e.target.value)}\n          required\n        />\n        <button className=\"search-button\">Search</button>\n      </form>\n      <div className=\"wrapper\">\n        <WeatherInfo weather={weather} />\n        <button className=\"update-button\" onClick={handleUpdate}>Update Weather</button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"
    },
    {
        "problem_id": "000000009",
        "complexity_level": 1,
        "image": "imgs/000000009/000000009.png",
        "instruction_layout": "The page layout is the main interface of a recipe sharing platform, featuring a search box, a recipe category navigation bar, and a recipe card display area. The search box is centrally located at the top of the page, used for entering recipe names or ingredients to search. Below the search box is the recipe category navigation bar, displaying different recipe categories such as \"Breakfast,\" \"Lunch,\" \"Dinner,\" and \"Desserts.\" The recipe card display area shows the search results or the list of recipes from the selected category, with each card containing the recipe name, a brief description, the estimated cooking time, and a button to view details.",
        "instruction_requirement": "This page needs to implement the core functions of a recipe sharing platform. Users can search for specific recipes through the search box or view recipes from different categories by clicking on the category navigation bar. Recipe cards should provide sufficient information overview and include a button to jump to the detailed page. Search and category browsing should respond quickly to ensure a smooth user experience. The page design should be fresh, simple, and easy to navigate.",
        "style": "html {font-size: 16px; background-color: #f9f9f9; color: #333;}\n.header { padding: 20px; text-align: center; }\n.search-box { padding: 10px; width: 100%; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 20px; }\n.category-nav { display: flex; justify-content: space-around; list-style: none; padding: 0; }\n.category-item { padding: 10px; cursor: pointer; color: #0277bd; }\n.category-item:hover { color: #01579b; }\n.recipe-list { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; }\n.recipe-card { background-color: white; border: 1px solid #ddd; border-radius: 8px; padding: 20px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); }\n.recipe-title { font-size: 18px; font-weight: bold; }\n.recipe-description { font-size: 14px; color: #666; }\n.cook-time { font-size: 14px; }\n.details-button { background-color: #4caf50; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer; }\n.details-button:hover { background-color: #388e3c; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst RecipeApp = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [recipes, setRecipes] = useState([]);\n\n  const handleSearch = () => {\n    // Fetch recipes based on searchTerm\n    console.log('Searching for recipes with:', searchTerm);\n  };\n\n  return (\n    <div className=\"header\">\n      <h1>Recipe Sharing Platform</h1>\n      <input type=\"text\" className=\"search-box\" placeholder=\"Search recipes...\" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />\n      <ul className=\"category-nav\">\n        <li className=\"category-item\" onClick={() => console.log('Breakfast')}>breakfast</li>\n        <li className=\"category-item\" onClick={() => console.log('Lunch')}>lunch</li>\n        <li className=\"category-item\" onClick={() => console.log('Dinner')}>dinner</li>\n        <li className=\"category-item\" onClick={() => console.log('Dessert')}>Dessert</li>\n      </ul>\n      <div className=\"recipe-list\">\n        {recipes.map((recipe, index) => (\n          <div key={index} className=\"recipe-card\">\n            <div className=\"recipe-title\">{recipe.name}</div>\n            <div className=\"recipe-description\">{recipe.description}</div>\n            <div className=\"cook-time\">Cook time: {recipe.cookTime} mins</div>\n            <button className=\"details-button\">View Details</button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default RecipeApp;"
    },
    {
        "problem_id": "000000010",
        "complexity_level": 1,
        "image": "imgs/000000010/000000010.png",
        "instruction_layout": "The page layout is for a fitness app interface, featuring a calendar component, a display area for personal fitness records, and a goal setting module. The calendar component is located at the top of the page, used to select dates to view specific day's fitness activities. The personal fitness record display area is below the calendar, showing the user's exercise type, duration, and calories burned for the day. The goal setting module is on the right side of the page, allowing users to set or update their daily fitness goals, such as steps taken and exercise time, with a light green background (#e8f5e9).",
        "instruction_requirement": "This page needs to implement a fitness app feature where users can view and record daily fitness activities. The calendar component should allow users to select any date and display the fitness activity records for that day. The personal fitness record area should dynamically show the type of exercise, duration, and calories burned for the selected date. The goal setting module should enable users to set specific fitness goals and provide interactive elements such as sliders or input boxes for setting goal values. The page design should be simple and clear, facilitating quick viewing or updating of information.",
        "style": "html {font-size: 16px; background-color: #fff; color: #333;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.calendar { width: 100%; border-bottom: 1px solid #ccc; padding: 15px; text-align: center; }\n.records { margin-top: 20px; width: 70%; padding: 15px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); }\n.goal-setting { flex-grow: 1; background-color: #e8f5e9; padding: 20px; border-radius: 8px; display: flex; flex-direction: column; justify-content: space-around; }\n.input { padding: 10px; border: 1px solid #ccc; border-radius: 4px; margin-bottom: 10px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst FitnessApp = () => {\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [fitnessData, setFitnessData] = useState({ type: 'Running', duration: '30 minutes', calories: 300 });\n  const [goal, setGoal] = useState({ steps: 10000, activeMinutes: 60 });\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n    // Fetch fitness data for selected date\n    console.log('Fetching data for ', date);\n  };\n\n  const handleGoalChange = (newGoal) => {\n    setGoal(newGoal);\n    // Update goal settings\n    console.log('Updating goal settings to ', newGoal);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"calendar\">Select a Date: <input type=\"date\" onChange={(e) => handleDateChange(e.target.value)} /></div>\n      <div className=\"records\">\n        <h2>Fitness Activities on {selectedDate.toDateString()}</h2>\n        <p>Activity: {fitnessData.type}</p>\n        <p>Duration: {fitnessData.duration}</p>\n        <p>Calories Burned: {fitnessData.calories}</p>\n      </div>\n      <div className=\"goal-setting\">\n        <h3>Set Your Fitness Goals</h3>\n        <label>Step Goal: <input type=\"number\" value={goal.steps} onChange={(e) => handleGoalChange({ ...goal, steps: e.target.value })} /></label>\n        <label>Active Minutes: <input type=\"number\" value={goal.activeMinutes} onChange={(e) => handleGoalChange({ ...goal, activeMinutes: e.target.value })} /></label>\n      </div>\n    </div>\n  );\n};\n\nexport default FitnessApp;"
    },
    {
        "problem_id": "000000011",
        "complexity_level": 1,
        "image": "imgs/000000011/000000011.png",
        "instruction_layout": "The page layout is a dynamic Q&A platform, featuring a question submission form, a question list, and an answer area. The question submission form is located at the top of the page with a light blue background (#e3f2fd), containing an input box and a submit button for users to input questions. The question list is below the submission form, displaying all questions submitted by users, with each question item expandable upon click to show related answers. The answer area dynamically displays the detailed answer to the question clicked by the user, with a white background, including the answer text and relevant data.",
        "instruction_requirement": "This page needs to implement a simple dynamic Q&A feature. Users can submit questions via a form, and once submitted, the questions are displayed in a list on the page. Clicking on any question in the list should show the detailed answer to that question. The Q&A content should be stored in the state and be updatable at any time. The page design should be simple, easy for user interaction, and ensure a smooth user experience.",
        "style": "html {font-size: 16px; background-color: #fff; color: #333;}\n.form-area { background-color: #e3f2fd; padding: 20px; text-align: center; }\n.input { padding: 10px; width: 300px; margin-right: 10px; border: 1px solid #ccc; border-radius: 4px; }\n.submit-button { background-color: #2196f3; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer; }\n.submit-button:hover { background-color: #1976d2; }\n.question-list { margin-top: 20px; }\n.question-item { padding: 10px; border-bottom: 1px solid #ddd; cursor: pointer; }\n.answer-area { padding: 20px; background-color: #fff; border-top: 1px solid #ddd; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst QAPlatform = () => {\n  const [question, setQuestion] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\n\n  const handleQuestionSubmit = (e) => {\n    e.preventDefault();\n    setQuestions([...questions, { question, answer: 'This is a dynamically generated answer for your question.' }]);\n    setQuestion('');\n  };\n\n  return (\n    <div>\n      <div className=\"form-area\">\n        <input type=\"text\" className=\"input\" placeholder=\"Ask a question...\" value={question} onChange={(e) => setQuestion(e.target.value)} />\n        <button className=\"submit-button\" onClick={handleQuestionSubmit}>Submit</button>\n      </div>\n      <div className=\"question-list\">\n        {questions.map((q, index) => (\n          <div key={index} className=\"question-item\" onClick={() => setSelectedQuestion(q)}>\n            {q.question}\n          </div>\n        ))}\n      </div>\n      {selectedQuestion && (\n        <div className=\"answer-area\">\n          <p><strong>Question:</strong> {selectedQuestion.question}</p>\n          <p><strong>Answer:</strong> {selectedQuestion.answer}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default QAPlatform;"
    },
    {
        "problem_id": "000000012",
        "complexity_level": 1,
        "image": "imgs/000000012/000000012.png",
        "instruction_layout": "The page layout is for a real-time bus tracking system, featuring a map display area and a bus route selector. The map display area is centrally located on the page, showing the current bus locations and their routes. The bus route selector is positioned above the map display area, allowing users to choose different bus routes to view their real-time positions and statuses. The page design is simple, with primary functions prominently displayed, making it easy for users to quickly select and view information.",
        "instruction_requirement": "This page needs to implement a real-time bus tracking feature. Users can select a specific bus route through the route selector, and the map area will update to display the real-time positions of buses on that route. The application should handle dynamic updates of real-time data to ensure the accuracy and timeliness of location information. The route selector should include multiple options, each corresponding to a different bus route.",
        "style": "html {font-size: 16px; background-color: #fff; color: #333;}\n.map-area { height: 80vh; width: 100%; background-color: #e0e0e0; }\n.selector-area { padding: 20px; background-color: #fafafa; border-bottom: 1px solid #ccc; }\n.route-selector { width: 300px; padding: 10px; border: 1px solid #ccc; border-radius: 4px; }",
        "file_type": "js",
        "component": "import React, { useState, useEffect } from 'react';\n\nconst BusTracker = () => {\n  const [selectedRoute, setSelectedRoute] = useState('');\n  const [busLocation, setBusLocation] = useState(null);\n\n  useEffect(() => {\n    // Fetch bus location based on selectedRoute\n    const fetchLocation = async () => {\n      const response = await fetch(`/api/location/${selectedRoute}`);\n      const data = await response.json();\n      setBusLocation(data);\n    };\n    if (selectedRoute) {\n      fetchLocation();\n    }\n  }, [selectedRoute]);\n\n  return (\n    <div>\n      <div className=\"selector-area\">\n        <select className=\"route-selector\" onChange={(e) => setSelectedRoute(e.target.value)}>\n          <option value=\"\">Select a Route</option>\n          <option value=\"route1\">Route 1</option>\n          <option value=\"route2\">Route 2</option>\n          <option value=\"route3\">Route 3</option>\n        </select>\n      </div>\n      <div className=\"map-area\">\n        {busLocation ? <p>Bus Location: {busLocation.latitude}, {busLocation.longitude}</p> : <p>No route selected.</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default BusTracker;"
    },
    {
        "problem_id": "000000014",
        "complexity_level": 1,
        "image": "imgs/000000014/000000014.png",
        "instruction_layout": "The page layout is a text editor interface, featuring a text input area, a formatting toolbar, and a text style preview area. The text input area is located on the left side of the page, providing a simple multi-line text box for users to input text. The formatting toolbar is positioned above the text input area and includes options for font size selection, bold, italic, and underline buttons. The text style preview area is on the right side of the page, displaying text that updates in real-time according to the styles selected in the formatting toolbar.",
        "instruction_requirement": "This page needs to implement a basic text editor function, allowing users to input text and format it using a toolbar. After users make style changes to the text, the preview area should instantly display the updated results. The page should provide a clear user interface, making it easy for users to access all text formatting options and see the immediate effects of style applications.",
        "style": "html {font-size: 16px; background-color: #f9f9f9; color: #333;}\n.editor-container { display: flex; padding: 20px; }\n.text-input-area { flex: 1; padding: 10px; }\n.textarea { width: 100%; height: 300px; padding: 8px; border: 1px solid #ccc; }\n.format-toolbar { padding: 10px; border-bottom: 1px solid #ccc; display: flex; gap: 10px; }\n.button { padding: 5px 10px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }\n.button:hover { background-color: #45a049; }\n.text-preview-area { flex: 1; padding: 10px; border-left: 1px solid #ccc; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst TextEditor = () => {\n  const [text, setText] = useState('');\n  const [format, setFormat] = useState({ bold: false, italic: false, underline: false });\n\n  const toggleFormat = (key) => {\n    setFormat({ ...format, [key]: !format[key] });\n  };\n\n  const formattedText = () => {\n    let style = '';\n    if (format.bold) style += 'font-weight:bold;';\n    if (format.italic) style += 'font-style:italic;';\n    if (format.underline) style += 'text-decoration:underline;';\n    return <div style={{ style }}>{text}</div>;\n  };\n\n  return (\n    <div className='editor-container'>\n      <div className='text-input-area'>\n        <div className='format-toolbar'>\n          <button onClick={() => toggleFormat('bold')}>Bold</button>\n          <button onClick={() => toggleFormat('italic')}>Italic</button>\n          <button onClick={() => toggleFormat('underline')}>Underline</button>\n        </div>\n        <textarea className='textarea' value={text} onChange={(e) => setText(e.target.value)}></textarea>\n      </div>\n      <div className='text-preview-area'>\n        {formattedText()}\n      </div>\n    </div>\n  );\n};\n\nexport default TextEditor;"
    },
    {
        "problem_id": "000000015",
        "complexity_level": 1,
        "image": "imgs/000000015/000000015.png",
        "instruction_layout": "The page layout features a real-time currency exchange rate calculator, including a currency selector, input box, exchange result display area, and real-time exchange rate update information. The currency selector is located at the top of the page, allowing users to choose different currency pairs for exchange. The input box is for users to enter the amount, with the calculated exchange result displayed below. Real-time exchange rate update information is shown at the bottom of the page, providing the timestamp and value of the latest exchange rate.",
        "instruction_requirement": "This page needs to implement a currency exchange feature where users can select the desired currency type and input the amount. The system calculates the result based on real-time exchange rates. The page should provide a clear currency selector, input box, and exchange result display area. Real-time exchange rate update information should be dynamically displayed to ensure the accuracy of the information users receive. The page design should be simple and clear, making it easy for users to operate and view results.",
        "style": "html {font-size: 16px; background-color: #f0f0f0; color: #333;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.selector { width: 100%; padding: 10px; margin-bottom: 10px; background-color: #fff; border: 1px solid #ccc; border-radius: 4px; }\n.input { padding: 10px; margin-bottom: 10px; width: 200px; border: 1px solid #ccc; border-radius: 4px; }\n.result-display { padding: 10px; background-color: #fff; border: 1px solid #ccc; border-radius: 4px; margin-bottom: 10px; }\n.update-info { font-size: 12px; color: #666; margin-top: 10px; }",
        "file_type": "js",
        "component": "import React, { useState, useEffect } from 'react';\n\nconst CurrencyConverter = () => {\n  const [currency, setCurrency] = useState('USD');\n  const [amount, setAmount] = useState('');\n  const [convertedAmount, setConvertedAmount] = useState('');\n  const [rateInfo, setRateInfo] = useState({ rate: 0, updatedTime: '' });\n\n  const handleCurrencyChange = (e) => {\n    setCurrency(e.target.value);\n    fetchRates(e.target.value);\n  };\n\n  const handleAmountChange = (e) => {\n    const amt = e.target.value;\n    setAmount(amt);\n    setConvertedAmount(amt * rateInfo.rate);\n  };\n\n  const fetchRates = async (currency) => {\n    const response = await fetch(`/api/rate/${currency}`);\n    const data = await response.json();\n    setRateInfo({ rate: data.rate, updatedTime: new Date().toLocaleTimeString() });\n  };\n\n  useEffect(() => {\n    fetchRates(currency);\n  }, [currency]);\n\n  return (\n    <div className='container'>\n      <select className='selector' value={currency} onChange={handleCurrencyChange}>\n        <option value='USD'>USD</option>\n        <option value='EUR'>EUR</option>\n        <option value='JPY'>JPY</option>\n      </select>\n      <input type='number' className='input' value={amount} onChange={handleAmountChange} placeholder='Enter amount' />\n      <div className='result-display'>Converted Amount: {convertedAmount}</div>\n      <div className='update-info'>Rate Updated: {rateInfo.updatedTime}</div>\n    </div>\n  );\n};\n\nexport default CurrencyConverter;"
    },
    {
        "problem_id": "000000016",
        "complexity_level": 1,
        "image": "imgs/000000016/000000016.png",
        "instruction_layout": "This page is a simple time management application interface, divided into three sections: time recorder, task list, and time statistics chart. The time recorder is located at the top of the page, providing a timer and start/pause buttons to record the start and end times of tasks. The task list is displayed in the middle of the page, listing all user-input tasks and their corresponding durations. The time statistics chart is located at the bottom of the page, showing the time proportions occupied by each task.",
        "instruction_requirement": "This app is designed to help users better manage their time by tracking and analyzing task durations through a simple interface. Users can start a timer to record time spent on specific tasks or manually input the start and end times. Upon task completion, users can view statistical charts of each task's time to understand their time allocation. The entire interface should respond quickly, ensuring users can easily manage and analyze their time usage.",
        "style": "html {font-size: 16px; background-color: #f0f0f0; color: #333;}\n.timer-container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.timer { margin: 10px; padding: 10px; background-color: #ffffff; border: 1px solid #ccc; width: 300px; text-align: center; }\n.task-list { margin-top: 20px; width: 80%; padding: 10px; background-color: #ffffff; border: 1px solid #ccc; }\n.chart-container { width: 80%; margin-top: 20px; padding: 20px; background-color: #ffffff; border: 1px solid #ccc; }",
        "file_type": "js",
        "component": "import React, { useState, useEffect } from 'react';\n\nconst TimeManagementApp = () => {\n  const [tasks, setTasks] = useState([]);\n  const [currentTask, setCurrentTask] = useState('');\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [isRunning, setIsRunning] = useState(false);\n\n  const handleStartStop = () => {\n    if (isRunning) {\n      setEndTime(new Date());\n      const duration = (new Date() - startTime) / 1000; // seconds\n      setTasks([...tasks, { taskName: currentTask, duration }]);\n      setIsRunning(false);\n    } else {\n      setStartTime(new Date());\n      setIsRunning(true);\n    }\n  };\n\n  return (\n    <div className='timer-container'>\n      <div className='timer'>\n        <input type='text' placeholder='enter task name' value={currentTask} onChange={(e) => setCurrentTask(e.target.value)} />\n        <button onClick={handleStartStop}>{isRunning ? 'pause' : 'start'}</button>\n      </div>\n      <div className='task-list'>\n        {tasks.map((task, index) => (\n          <div key={index}>{task.taskName}: {task.duration} seconds</div>\n        ))}\n      </div>\n      <div className='chart-container'>\n      </div>\n    </div>\n  );\n};\n\nexport default TimeManagementApp;"
    },
    {
        "problem_id": "000000017",
        "complexity_level": 1,
        "image": "imgs/000000017/000000017.png",
        "instruction_layout": "This page is designed as an online course management system, with the interface divided into three sections: Course Catalog, Course Details Area, and Learning Progress Tracking. The Course Catalog is listed on the left side of the interface, displaying all available courses in a list format. When a user clicks on a course, the Course Details Area expands in the center of the page, showing detailed information about the course, instructional videos, and download links for course materials. The Learning Progress Tracking is located on the right side of the page, graphically displaying the user's completion status for the current course.",
        "instruction_requirement": "This system aims to provide users with a clear and convenient online learning experience. The course catalog should include a rich selection of courses. Upon clicking a course name, the central details area needs to respond instantly, loading the content and resources of the selected course. The learning progress tracking area should update in real-time, reflecting the user's learning achievements. The entire interface layout should be simple and orderly, allowing users to quickly find the necessary learning materials and monitor their progress.",
        "style": "html {font-size: 16px; background-color: #f8f9fa; color: #333;}\n.container { display: flex; padding: 20px; height: 90vh; }\n.course-list { width: 20%; background-color: #ffffff; border-right: 1px solid #ddd; overflow-y: auto; }\n.course-detail { flex-grow: 2; padding: 20px; background-color: #ffffff; }\n.progress-tracker { width: 20%; background-color: #ffffff; border-left: 1px solid #ddd; display: flex; flex-direction: column; align-items: center; justify-content: center; }\n.course-item { padding: 10px; cursor: pointer; border-bottom: 1px solid #eee; }\n.course-item:hover { background-color: #f0f0f0; }\n.progress-chart { width: 90%; height: 200px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst CourseManager = () => {\n  const [courses, setCourses] = useState([{ id: 1, name: 'Advanced Mathematics', description: 'This course provides a detailed introduction to the fundamentals of advanced mathematics...' }, { id: 2, name: 'Linear Algebra', description: 'Linear algebra is the cornerstone of modern mathematics...' }]);\n  const [selectedCourse, setSelectedCourse] = useState(null);\n\n  const selectCourse = (course) => {\n    setSelectedCourse(course);\n  };\n\n  return (\n    <div className='container'>\n      <div className='course-list'>\n        {courses.map(course => (\n          <div key={course.id} className='course-item' onClick={() => selectCourse(course)}>\n            {course.name}\n          </div>\n        ))}\n      </div>\n      <div className='course-detail'>\n        {selectedCourse ? (\n          <div>\n            <h2>{selectedCourse.name}</h2>\n            <p>{selectedCourse.description}</p>\n          </div>\n        ) : <p>Please select a course to view details.</p>}\n      </div>\n      <div className='progress-tracker'>\n      </div>\n    </div>\n  );\n};\n\nexport default CourseManager;"
    },
    {
        "problem_id": "000000018",
        "complexity_level": 1,
        "image": "imgs/000000018/000000018.png",
        "instruction_layout": "The page layout is for an online voting system, divided into three sections: the voting options list, the voting results display area, and the voting operation area. The voting options list is on the left side of the page, listing all the candidates. Each candidate is accompanied by a radio button, allowing users to select their supported candidate. The voting results display area is on the right side of the page, graphically showing the vote percentages for each candidate. The voting operation area is at the bottom of the page, containing a button to submit the vote.",
        "instruction_requirement": "The system's primary functions are for users to submit votes and view voting results. After selecting a candidate from the voting options list, users can click the submit button in the voting operation area to cast their vote. The system needs to update in real-time and graphically display the latest voting statistics in the voting results display area. The entire page design should be simple and clear, with intuitive operations, ensuring that users can easily vote and view real-time results.",
        "style": "html {font-size: 16px; background-color: #f0f0f0; color: #333;}\n.container { display: flex; justify-content: space-between; padding: 20px; height: 80vh; }\n.vote-list { width: 40%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.vote-item { margin: 10px 0; display: flex; align-items: center; }\n.radio { margin-right: 10px; }\n.result-section { width: 50%; padding: 20px; background-color: #ffffff; border-radius: 5px; }\n.vote-button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; }\n.vote-button:hover { background-color: #45a049; }",
        "file_type": "js",
        "component": "import React, { useState, useEffect } from 'react';\n\nconst OnlineVotingSystem = () => {\n  const [candidates, setCandidates] = useState([{ name: 'candidate A', votes: 0 }, { name: 'candidate B', votes: 0 }]);\n  const [selectedCandidate, setSelectedCandidate] = useState('');\n\n  const handleVote = () => {\n    setCandidates(candidates.map(candidate =>\n      candidate.name === selectedCandidate ? { ...candidate, votes: candidate.votes + 1 } : candidate\n    ));\n  };\n\n  return (\n    <div className='container'>\n      <div className='vote-list'>\n        {candidates.map((candidate, index) => (\n          <div key={index} className='vote-item'>\n            <input type='radio' name='candidate' className='radio' onChange={() => setSelectedCandidate(candidate.name)} />\n            {candidate.name}\n          </div>\n        ))}\n      </div>\n      <div className='result-section'>\n        {candidates.map((candidate, index) => (\n          <p key={index}>{candidate.name}：{candidate.votes} votes</p>\n        ))}\n      </div>\n      <button className='vote-button' onClick={handleVote}>submit vote</button>\n    </div>\n  );\n};\n\nexport default OnlineVotingSystem;"
    },
    {
        "problem_id": "000000019",
        "complexity_level": 1,
        "image": "imgs/000000019/000000019.png",
        "instruction_layout": "This page features a simple interface for a network speed test tool, primarily consisting of a network speed display area and a test button. The network speed display area is centrally located on the page, showcasing the current download and upload speeds in large font. Below the display area, the test button allows users to initiate the network speed test upon clicking.",
        "instruction_requirement": "The core function of this tool is to test and display the user's network download and upload speeds. After the user clicks the test button, the system should automatically detect and calculate the current network speed, then update this information in the speed display area. The interface design should be simple and intuitive, ensuring that users can clearly see the most critical information and easily perform operations.",
        "style": "html {font-size: 16px; background-color: #fff; color: #333;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.speed-display { margin-top: 20px; font-size: 24px; padding: 20px; border: 1px solid #ccc; width: 300px; text-align: center; }\n.test-button { margin-top: 20px; padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; }\n.test-button:hover { background-color: #45a049; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst NetworkSpeedTest = () => {\n  const [speed, setSpeed] = useState({ download: '0 Mbps', upload: '0 Mbps' });\n\n  const handleTest = async () => {\n    const simulatedDownloadSpeed = (Math.random() * 100).toFixed(2) + ' Mbps';\n    const simulatedUploadSpeed = (Math.random() * 50).toFixed(2) + ' Mbps';\n    setSpeed({ download: simulatedDownloadSpeed, upload: simulatedUploadSpeed });\n  };\n\n  return (\n    <div className='container'>\n      <div className='speed-display'>\n        download speed: {speed.download}<br/>\n        upload speed: {speed.upload}\n      </div>\n      <button className='test-button' onClick={handleTest}>test internet speed</button>\n    </div>\n  );\n};\n\nexport default NetworkSpeedTest;"
    },
    {
        "problem_id": "000000020",
        "complexity_level": 1,
        "image": "imgs/000000020/000000020.png",
        "instruction_layout": "This page is designed as an environmental theme energy consumption tracking system, featuring sections for energy consumption input, historical data display, and energy-saving suggestions. The energy consumption input area allows users to enter daily electricity and water consumption data. The historical data display area graphically presents the user's past energy consumption trends, while the energy-saving suggestions module provides personalized energy-saving advice based on the user's consumption patterns.",
        "instruction_requirement": "The system is designed to help users monitor and manage their personal energy usage, promoting environmental awareness and behavioral change. Users should be able to easily input daily consumption data and view changes in their consumption trends in the historical data display area. The energy-saving advice module needs to dynamically generate recommendations to help users optimize their energy usage. The interface design should be simple and user-friendly, encouraging users to actively participate in environmental protection activities.",
        "style": "html {font-size: 16px; background-color: #e6f5d0; color: #333;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.input-section { width: 90%; margin: 10px 0; padding: 10px; background-color: #ffffff; border-radius: 4px; }\n.data-section { width: 90%; margin-top: 20px; background-color: #ffffff; border-radius: 4px; padding: 20px; }\n.advice-section { width: 90%; margin-top: 20px; padding: 20px; background-color: #ffffff; border-radius: 4px; text-align: center; }\n.input-field { padding: 10px; margin-right: 10px; border: 1px solid #ccc; border-radius: 4px; width: 200px; }\n.submit-button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; }\n.submit-button:hover { background-color: #45a049; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst EnergyTracker = () => {\n  const [energyData, setEnergyData] = useState({ electricity: '', water: '' });\n  const [history, setHistory] = useState([]);\n  const [advice, setAdvice] = useState('');\n\n  const handleSubmit = () => {\n    const newHistory = [...history, energyData];\n    setHistory(newHistory);\n    generateAdvice(energyData);\n    setEnergyData({ electricity: '', water: '' });\n  };\n\n  const generateAdvice = (data) => {\n    if (data.electricity > 100) {\n      setAdvice('Try to reduce electricity consumption, for example, by using energy-saving bulbs.');\n    } else {\n      setAdvice('Energy usage efficiency is good, please keep it up!');\n    }\n  };\n\n  return (\n    <div className='container'>\n      <div className='input-section'>\n        <input type='number' className='input-field' placeholder='Enter electricity consumption (kWh)' value={energyData.electricity} onChange={e => setEnergyData({ ...energyData, electricity: e.target.value })} />\n        <input type='number' className='input-field' placeholder='Enter water consumption (liters)' value={energyData.water} onChange={e => setEnergyData({ ...energyData, water: e.target.value })} />\n        <button className='submit-button' onClick={handleSubmit}>Submit Data</button>\n      </div>\n      <div className='data-section'>\n      </div>\n      <div className='advice-section'>\n        <p>{advice}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default EnergyTracker;"
    },
    {
        "problem_id": "000000049",
        "complexity_level": 1,
        "image": "imgs/000000049/000000049.png",
        "instruction_layout": "This page is designed as a city greening participation platform, divided into the Plant Cultivation Tutorial Area, Community Greening Project Area, and Volunteer Activity Registration Area. The Plant Cultivation Tutorial Area is on the left side of the page, offering comprehensive video tutorials from selecting soil to plant maintenance. The Community Greening Project Area is in the center, showcasing various ongoing greening projects in the city and allowing users to participate directly. The Volunteer Activity Registration Area is on the right side, where users can view upcoming greening activities and sign up to join.",
        "instruction_requirement": "The platform aims to promote citizens' active participation in urban greening and enhance community environmental awareness. The plant cultivation tutorial section should provide practical video tutorials to help users learn basic gardening skills. The community greening project section needs to display detailed project information, including project goals, locations, and progress status, encouraging user participation. The volunteer activity registration section should have a clear activity schedule and registration process, making it easy for users to quickly join upcoming events. The interface design should be fresh and natural, with simple and intuitive operation, encouraging frequent visits and participation by users.",
        "style": "html {font-size: 16px; background-color: #ecf9ec; color: #336633;}\n.container { display: flex; justify-content: space-between; padding: 20px; height: 90vh; }\n.tutorial-section { width: 30%; padding: 20px; background-color: #dff0d8; border-radius: 5px; overflow-y: auto; }\n.project-section { width: 40%; padding: 20px; background-color: #dff0d8; border-radius: 5px; }\n.volunteer-section { width: 25%; padding: 20px; background-color: #dff0d8; border-radius: 5px; }\n.item { padding: 10px; border-bottom: 1px solid #c3e6cb; cursor: pointer; }\n.button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }\n.button:hover { background-color: #45a049; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst UrbanGreeningPlatform = () => {\n  const [tutorials, setTutorials] = useState(['Soil Preparation', 'Plant Care']);\n  const [projects, setProjects] = useState(['Community Garden at City Square', 'Rooftop Greening Initiative']);\n  const [upcomingEvents, setUpcomingEvents] = useState(['Tree Planting Day', 'Weekly Weeding Session']);\n\n  const handleJoinProject = (project) => {\n    alert(`Joined project: ${project}`);\n  };\n\n  const handleSignUpForEvent = (event) => {\n    alert(`Signed up for event: ${event}`);\n  };\n\n  return (\n    <div className='container'>\n      <div className='tutorial-section'>\n        {tutorials.map((tutorial, index) => <div key={index} className='item'>{tutorial}</div>)}\n      </div>\n      <div className='project-section'>\n        {projects.map((project, index) => <div key={index} className='item' onClick={() => handleJoinProject(project)}>{project}</div>)}\n      </div>\n      <div className='volunteer-section'>\n        {upcomingEvents.map((event, index) => <div key={index} className='item'><button className='button' onClick={() => handleSignUpForEvent(event)}>Sign Up</button></div>)}\n      </div>\n    </div>\n  );\n};\n\nexport default UrbanGreeningPlatform;"
    },
    {
        "problem_id": "000000050",
        "complexity_level": 1,
        "image": "imgs/000000050/000000050.png",
        "instruction_layout": "This page is designed as an online platform for the translation and research of ancient Chinese texts, divided into the Original Text Display Area, Translation Tools Area, and Academic Forum Area. The Original Text Display Area is located on the left side of the page, providing scanned copies and proofread texts of ancient documents. The Translation Tools Area is in the center, featuring document translation functions and terminology explanations, allowing users to submit their own translation versions. The Academic Forum Area is on the right side, offering a platform for researchers and enthusiasts to discuss ancient texts, where they can post questions, engage in discussions, and share research findings.",
        "instruction_requirement": "The platform aims to promote the translation and academic exchange of ancient texts, enhancing the accessibility and depth of understanding of these documents. The original text display area should clearly present the original documents for easy user reference and comparison. The translation tools section should provide efficient translation aids, including smart dictionaries and historical context analysis functions, supporting comparison of multiple translation versions. The academic forum area needs to offer a highly interactive discussion environment, encouraging open academic exchange and collaborative research. The interface design should combine classical aesthetics with modern functionality, creating a comfortable and efficient user experience.",
        "style": "html {font-size: 16px; background-color: #faf8f0; color: #604b42;}\n.container { display: flex; justify-content: space-between; padding: 20px; height: 90vh; }\n.document-section { width: 30%; padding: 20px; background-color: #f2e8df; border-radius: 5px; overflow-y: auto; }\n.translation-section { width: 35%; padding: 20px; background-color: #f2e8df; border-radius: 5px; }\n.forum-section { width: 30%; padding: 20px; background-color: #f2e8df; border-radius: 5px; }\n.document-display { padding: 10px; border-bottom: 1px solid #e1d7ce; cursor: pointer; }\n.discussion { padding: 10px; background-color: #e3dfd6; margin-bottom: 10px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst AncientTextsPlatform = () => {\n  const [documents, setDocuments] = useState(['Tang Dynasty Poem', 'Song Dynasty Legal Text']);\n  const [translations, setTranslations] = useState([]);\n  const [forumPosts, setForumPosts] = useState(['Discussion on Tang Poetry', 'Analysis of Song Legislation']);\n\n  const handleDocumentSelect = (doc) => {\n    // Logic to display document content\n    alert(`Selected document: ${doc}`);\n  };\n\n  const handleTranslationSubmit = (text) => {\n    // Logic to add translation to the list\n    setTranslations([...translations, text]);\n  };\n\n  return (\n    <div className='container'>\n      <div className='document-section'>\n        {documents.map((doc, index) => <div key={index} className='document-display' onClick={() => handleDocumentSelect(doc)}>{doc}</div>)}\n      </div>\n      <div className='translation-section'>\n        <textarea placeholder='Enter your translation here...' />\n        <button onClick={() => handleTranslationSubmit('New Translation')}>Submit Translation</button>\n        {translations.map((trans, index) => <div key={index}>{trans}</div>)}\n      </div>\n      <div className='forum-section'>\n        {forumPosts.map((post, index) => <div key={index} className='discussion'>{post}</div>)}\n      </div>\n    </div>\n  );\n};\n\nexport default AncientTextsPlatform;"
    },
    {
        "problem_id": "000000052",
        "complexity_level": 1,
        "image": "imgs/000000052/000000052.png",
        "instruction_layout": "This page is designed as an online platform for astronomical observation and learning, divided into the Star Map Gallery, Astronomical Phenomena Explanation, and Telescope Operation Simulation sections. The Star Map Gallery is located on the left side of the page, providing detailed constellation maps and deep-sky object photographs. The Astronomical Phenomena Explanation section is in the center of the page, introducing the scientific principles and observation methods of various astronomical events such as solar and lunar eclipses and meteor showers. The Telescope Operation Simulation section is on the right side of the page, where users can simulate using different types of telescopes to observe, experiencing the process of adjusting focus and tracking celestial bodies.",
        "instruction_requirement": "The platform aims to provide a comprehensive environment for astronomical learning and practice, enabling astronomy enthusiasts to better understand and engage in astronomical observations. The Star Map Gallery section requires high-definition celestial images and offers search and categorization features to help users find interesting constellations or celestial bodies. The Astronomical Phenomena Explanation section should thoroughly explain the scientific background of astronomical events, incorporating interactive elements such as videos and animations to enhance the learning experience. The Telescope Operation Simulation section needs to provide a realistic operation interface, allowing users to practice and master telescope usage skills in a virtual environment. The interface design should be clear, modern, and smooth, encouraging users to explore and learn.",
        "style": "html {font-size: 16px; background-color: #0a0a23; color: #c0c0c0;}\n.container { display: flex; justify-content: space-between; padding: 20px; height: 90vh; }\n.gallery-section { width: 30%; padding: 20px; background-color: #151540; border-radius: 5px; overflow-y: auto; }\n.explanation-section { width: 40%; padding: 20px; background-color: #151540; border-radius: 5px; }\n.telescope-section { width: 25%; padding: 20px; background-color: #151540; border-radius: 5px; }\n.item { padding: 10px; border-bottom: 1px solid #333360; cursor: pointer; }\n.simulation-control { padding: 10px 20px; background-color: #336699; color: white; border: none; cursor: pointer; }\n.simulation-control:hover { background-color: #225588; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst AstronomyObservationPlatform = () => {\n  const [starImages, setStarImages] = useState(['Orion Nebula', 'Andromeda Galaxy']);\n  const [astronomicalEvents, setAstronomicalEvents] = useState(['Solar Eclipse', 'Meteor Shower']);\n  const [telescopeSettings, setTelescopeSettings] = useState('Focus adjusted to 150mm');\n\n  const handleSelectImage = (image) => {\n    alert(`Viewing: ${image}`);\n  };\n\n  const handleLearnEvent = (event) => {\n    alert(`Learning about: ${event}`);\n  };\n\n  const handleAdjustTelescope = (setting) => {\n    setTelescopeSettings(`Telescope setting adjusted to: ${setting}`);\n  };\n\n  return (\n    <div className='container'>\n      <div className='gallery-section'>\n        {starImages.map((image, index) => <div key={index} className='item' onClick={() => handleSelectImage(image)}>{image}</div>)}\n      </div>\n      <div className='explanation-section'>\n        {astronomicalEvents.map((event, index) => <div key={index} className='item' onClick={() => handleLearnEvent(event)}>{event}</div>)}\n      </div>\n      <div className='telescope-section'>\n        <button className='simulation-control' onClick={() => handleAdjustTelescope('200mm')}>Adjust Focus</button>\n        <p>{telescopeSettings}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default AstronomyObservationPlatform;"
    },
    {
        "problem_id": "000000062",
        "complexity_level": 1,
        "image": "imgs/000000062/000000062.png",
        "instruction_layout": "This component is designed as a real-time information widget for the availability of city shared bikes. The background color is a refreshing teal (#00ACC1), and the text color is white (#FFFFFF). The widget displays the names of multiple bike stations and the current number of available bikes. Users can search for the availability of bikes at specific locations by entering the station name in the search bar, with results updating in real-time. All information is presented in card format, with the detailed address of the station at the bottom of each card.",
        "instruction_requirement": "This widget is designed to help citizens quickly obtain information on available bikes at nearby bike-sharing stations, promote the use of shared bikes, and support environmentally friendly travel. Users should be able to quickly find the availability of bikes at specific stations through the search function. The system needs to pull data from each station in real-time to ensure the accuracy and timeliness of the information. The widget should have high availability and fast response speed to ensure a smooth user experience.",
        "style": "body { font-family: 'Roboto', sans-serif; background-color: #00ACC1; color: #FFFFFF; }\n.widget-container { display: flex; flex-direction: column; align-items: center; padding: 20px; border-radius: 5px; margin-top: 20px; background-color: #0097A7; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3); }\n.station-card { margin: 10px; padding: 15px; width: 95%; border-radius: 4px; background-color: #00838F; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2); }\n.search-bar { margin-bottom: 20px; width: 90%; padding: 8px; border: none; border-radius: 4px; }",
        "file_type": "js",
        "component": "import React, { useState, useEffect } from 'react';\n\nconst BikeSharingWidget = () => {\n  const [stations, setStations] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch('https://api.citybik.es/v2/networks');\n      const data = await response.json();\n      setStations(data.networks);\n    };\n    fetchData();\n  }, []);\n\n  const handleSearch = (event) => {\n    setFilter(event.target.value);\n  };\n\n  return (\n    <div className='widget-container' style={{ fontFamily: 'Roboto', backgroundColor: '#00ACC1', color: '#FFFFFF' }}> \n      <input type='text' placeholder='search...' onChange={handleSearch} className='search-bar' />\n      {stations.filter(station => station.name.toLowerCase().includes(filter.toLowerCase())).map((station, index) => (\n        <div key={index} className='station-card'>\n          <h2>{station.name}</h2>\n          <p>available cars: {station.free_bikes}</p>\n          <p>address: {station.location.city}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default BikeSharingWidget;"
    },
    {
        "problem_id": "000000066",
        "complexity_level": 1,
        "image": "imgs/000000066/000000066.png",
        "instruction_layout": "This component, 'Local History Timeline', displays a series of historical events in a horizontally scrollable timeline. Each event on the timeline is represented by a card that contains a brief description, a significant date, and an optional image. The background color is a historical parchment (#F5F5DC), with text in a classical font style.",
        "instruction_requirement": "The component's purpose is to educate and engage users with the local history of a community or region. It should present historical events in a clear and concise manner, allowing users to scroll through time and explore various significant events. Each event card should be interactive and expand upon being clicked to reveal more details or images related to the historical event.",
        "style": "body { font-family: 'Times New Roman', serif; background-color: #F5F5DC; color: #333; }\n.timeline-container { display: flex; overflow-x: scroll; padding: 20px; align-items: center; width: 100%; background-color: #FFF8DC; box-shadow: 0 2px 5px rgba(0,0,0,0.2); }\n.event-card { min-width: 220px; margin: 10px; padding: 10px; background-color: #FAFAD2; border: solid 1px #DEB887; border-radius: 4px; text-align: center; }\n.event-image { width: 100%; height: 140px; object-fit: cover; border-top-left-radius: 4px; border-top-right-radius: 4px; }",
        "file_type": "js",
        "component": "import React from 'react';\n\nconst events = [\n  { id: 1, title: 'Founding of Town', date: '1800', description: 'The town was founded by settlers in the early 19th century.', image: 'path/to/image1.jpg' },\n  { id: 2, title: 'Railroad Built', date: '1880', description: 'The completion of the railroad which sparked economic growth.', image: 'path/to/image2.jpg' },\n  { id: 3, title: 'Historical Flood', date: '1920', description: 'A major flood that reshaped the geography of the region.', image: 'path/to/image3.jpg' }\n];\n\nconst HistoryTimeline = () => {\n  return (\n    <div className='timeline-container' style={{ fontFamily: 'Times New Roman', backgroundColor: '#F5F5DC' }}>\n      {events.map(event => (\n        <div key={event.id} className='event-card'>\n          {event.image && <img src={event.image} alt={event.title} className='event-image' />}\n          <h3>{event.title}</h3>\n          <p>{event.date}</p>\n          <p>{event.description}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default HistoryTimeline;"
    },
    {
        "problem_id": "000000073",
        "complexity_level": 1,
        "image": "imgs/000000073/000000073.png",
        "instruction_layout": "This component is designed as a 'Local Heroes Memory Wall', intended to celebrate local heroes by displaying their photos and short biographies in an interactive grid. The background color is navy blue (#003366), with text in white (#FFFFFF) to ensure readability and focus on individual profiles.",
        "instruction_requirement": "The aim of the component is to foster community pride and awareness by highlighting local heroes. It should present a grid of hero profiles, each card containing a hero's photo and a brief clickable biography that expands when selected. This component should be engaging and serve as an educational tool for local schools and community centers.",
        "style": "body { font-family: 'Helvetica', sans-serif; background-color: #003366; color: #FFFFFF; }\n.heroes-container { display: flex; flex-wrap: wrap; justify-content: center; padding: 20px; gap: 15px; }\n.hero-card { width: 180px; height: 300px; background-color: #004488; border-radius: 10px; padding: 10px; box-shadow: 0 4px 6px rgba(0, 51, 102, 0.7); cursor: pointer; }\n.hero-image { width: 100%; height: 50%; object-fit: cover; border-top-left-radius: 8px; border-top-right-radius: 8px; }\n.hero-bio { padding: 10px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst heroes = [\n  { id: 1, name: 'Jane Doe', role: 'Educator', image: 'path/to/jane.jpg', bio: 'Jane Doe has been an influential educator in our community for over 20 years.' },\n  { id: 2, name: 'John Smith', role: 'Firefighter', image: 'path/to/john.jpg', bio: 'John Smith has served as a firefighter, saving lives and teaching fire safety.' }\n];\n\nconst MemoryWall = () => {\n  const [selectedId, setSelectedId] = useState(null);\n\n  const toggleBio = (id) => {\n    setSelectedId(selectedId === id ? null : id);\n  };\n\n  return (\n    <div className='heroes-container'>\n      {heroes.map(hero => (\n        <div key={hero.id} className='hero-card' onClick={() => toggleBio(hero.id)}>\n          <img src={hero.image} alt={hero.name} className='hero-image' />\n          <div className='hero-bio' style={{ height: selectedId === hero.id ? 'auto' : '20px' }}>{hero.bio}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default MemoryWall;"
    },
    {
        "problem_id": "000000074",
        "complexity_level": 1,
        "image": "imgs/000000074/000000074.png",
        "instruction_layout": "This component is designed as a 'Local Cultural Quiz' to engage users with questions about their local culture. The design features a simple interface with a clean look, using a color scheme of deep blue (#003366) and white (#FFFFFF). Each quiz question appears one at a time, with multiple-choice answers.",
        "instruction_requirement": "The aim of this component is to educate users about their local culture through an engaging quiz format. It should allow users to answer questions and receive immediate feedback on their choices. The quiz should cycle through a set number of questions and then display the user's score with an option to restart.",
        "style": "body { font-family: 'Arial', sans-serif; background-color: #003366; color: #FFFFFF; }\n.quiz-container { display: flex; flex-direction: column; align-items: center; padding: 20px; border-radius: 8px; background-color: #004488; width: 80%; margin: auto; max-width: 600px; }\n.question { margin-bottom: 20px; font-size: 20px; }\n.answers { list-style: none; padding: 0; }\n.answer { background: none; border: 1px solid #FFFFFF; color: #FFFFFF; padding: 10px 20px; margin: 10px; cursor: pointer; border-radius: 5px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst questions = [\n  { question: 'Who was the first mayor of our town?', answers: ['John Doe', 'Jane Smith', 'Emily Johnson'], correct: 1 },\n  { question: 'What year was the local library built?', answers: ['1920', '1950', '1980'], correct: 0 },\n  { question: 'Which local landmark is over 100 years old?', answers: ['The town hall', 'The old bridge', 'Both'], correct: 2 }\n];\n\nconst CulturalQuiz = () => {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n\n  const handleAnswer = (index) => {\n    if (index === questions[currentQuestion].correct) {\n      setScore(score + 1);\n    }\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  return (\n    <div className='quiz-container'>\n      {showScore ? (\n        <div>You scored {score} out of {questions.length}</div>\n      ) : (\n        <>\n          <div className='question'>{questions[currentQuestion].question}</div>\n          <ul className='answers'>\n            {questions[currentQuestion].answers.map((answer, index) => (\n              <li key={index}>\n                <button className='answer' onClick={() => handleAnswer(index)}>{answer}</button>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default CulturalQuiz;"
    },
    {
        "problem_id": "000000046",
        "complexity_level": 2,
        "image": "imgs/000000046/000000046.png",
        "instruction_layout": "This page is designed as an antique collection and appreciation platform, divided into an antique catalog browsing area, an antique detail analysis area, and an online appraisal service area. The antique catalog browsing area is on the left side of the page, displaying antique collections of different categories, including porcelain, calligraphy and paintings, and other cultural relics. The antique detail analysis area is in the center of the page, providing detailed historical background, artistic features, and maintenance knowledge for each antique. The online appraisal service area is on the right side of the page, where users can upload pictures of antiques, and the expert team will provide appraisal opinions and estimates online.",
        "instruction_requirement": "The platform aims to provide antique enthusiasts and collectors with a professional environment for in-depth understanding and appreciation of antiques. The antique catalog browsing area needs to systematically categorize and display antiques, facilitating users to quickly find items of interest. The antique detail analysis section should offer rich content, including the history, artistic value, and maintenance methods of each antique, enhancing the user's knowledge experience. The online appraisal service area should support users in uploading images and quickly receiving feedback from experts, providing a convenient online appraisal service. The interface design should be elegant and functionally clear, ensuring an efficient and pleasant user experience.",
        "style": "html {font-size: 16px; background-color: #fdf8f2; color: #645e52;}\n.container { display: flex; justify-content: space-between; padding: 20px; height: 90vh; }\n.catalog-section { width: 30%; padding: 20px; background-color: #f5eee8; border-radius: 5px; overflow-y: auto; }\n.details-section { width: 40%; padding: 20px; background-color: #f5eee8; border-radius: 5px; }\n.assessment-section { width: 25%; padding: 20px; background-color: #f5eee8; border-radius: 5px; }\n.item-display { padding: 10px; border-bottom: 1px solid #dec8b1; cursor: pointer; }\n.input-field { width: 100%; padding: 8px; border: 1px solid #dec8b1; margin-bottom: 10px; background-color: #fff; color: #645e52; }\n.submit-button { padding: 10px 20px; background-color: #8a837f; color: white; border: none; cursor: pointer; }\n.submit-button:hover { background-color: #726e68; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst AntiqueCollectionPlatform = () => {\n  const [antiqueItems, setAntiqueItems] = useState(['Ming Dynasty Vase', 'Qing Dynasty Scroll']);\n  const [selectedItemDetails, setSelectedItemDetails] = useState('');\n  const [appraisalResult, setAppraisalResult] = useState('');\n\n  const handleSelectItem = (item) => {\n    setSelectedItemDetails(`Selected: ${item}, with intricate details about its origin and preservation.`);\n  };\n\n  const handleUploadForAppraisal = () => {\n    setAppraisalResult('Appraisal completed: Estimated value $5000.');\n  };\n\n  return (\n    <div className='container'>\n      <div className='catalog-section'>\n        {antiqueItems.map((item, index) => <div key={index} className='item-display' onClick={() => handleSelectItem(item)}>{item}</div>)}\n      </div>\n      <div className='details-section'>\n        <p>{selectedItemDetails}</p>\n      </div>\n      <div className='assessment-section'>\n        <input type='file' className='input-field' onChange={handleUploadForAppraisal} />\n        <button className='submit-button' onClick={handleUploadForAppraisal}>Submit for Appraisal</button>\n        <p>{appraisalResult}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default AntiqueCollectionPlatform;"
    },
    {
        "problem_id": "000000048",
        "complexity_level": 2,
        "image": "imgs/000000048/000000048.png",
        "instruction_layout": "This page is designed as an online first aid skills learning platform, divided into a first aid technique video teaching area, a real-time Q&A interaction area, and a first aid knowledge quiz area. The first aid technique video teaching area is on the left side of the page, providing video tutorials on first aid skills from basic to advanced levels. The real-time Q&A interaction area is in the center of the page, where users can ask first aid experts questions in real-time or participate in discussions. The first aid knowledge quiz area is on the right side of the page, testing users' acquired first aid knowledge through interactive quizzes.",
        "instruction_requirement": "The platform aims to enhance public awareness and skills in first aid, ensuring that users can provide effective assistance in emergencies. The first aid technique video teaching area should cover a variety of skills from simple bandaging to CPR, with detailed and easy-to-understand video content. The real-time Q&A interaction area should respond quickly to user questions, providing professional guidance and advice. The first aid knowledge quiz area needs to design stimulating interactive questions to help users consolidate and evaluate the knowledge they have learned. The overall design should be simple and clear, encouraging users to actively learn and interact.",
        "style": "html {font-size: 16px; background-color: #fff; color: #333;}\n.container { display: flex; justify-content: space-between; padding: 20px; height: 90vh; }\n.video-section { width: 30%; padding: 20px; background-color: #eef; border-radius: 5px; overflow-y: auto; }\n.qa-section { width: 35%; padding: 20px; background-color: #eef; border-radius: 5px; }\n.quiz-section { width: 30%; padding: 20px; background-color: #eef; border-radius: 5px; }\n.interactive-item { padding: 10px; border-bottom: 1px solid #ddd; cursor: pointer; }\n.quiz-item { padding: 10px; background-color: #cce; margin-bottom: 10px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst FirstAidLearningPlatform = () => {\n  const [videos, setVideos] = useState(['CPR Techniques', 'How to Treat Burns']);\n  const [questions, setQuestions] = useState(['How to apply a tourniquet?']);\n  const [quizResults, setQuizResults] = useState([]);\n\n  const handleVideoSelect = (video) => {\n    // Logic to display selected video content\n    alert(`Playing video: ${video}`);\n  };\n\n  const handleQuestionSubmit = (question) => {\n    // Logic to submit question and receive answer\n    alert(`Question submitted: ${question}`);\n  };\n\n  const handleQuizAttempt = (answer) => {\n    // Logic to evaluate quiz answer\n    setQuizResults([...quizResults, `Answer: ${answer} is correct`]);\n  };\n\n  return (\n    <div className='container'>\n      <div className='video-section'>\n        {videos.map((video, index) => <div key={index} className='interactive-item' onClick={() => handleVideoSelect(video)}>{video}</div>)}\n      </div>\n      <div className='qa-section'>\n        {questions.map((question, index) => <div key={index} className='interactive-item' onClick={() => handleQuestionSubmit(question)}>{question}</div>)}\n      </div>\n      <div className='quiz-section'>\n        <div className='quiz-item' onClick={() => handleQuizAttempt('Correct')}>Take the quiz on CPR</div>\n        {quizResults.map((result, index) => <div key={index}>{result}</div>)}\n      </div>\n    </div>\n  );\n};\n\nexport default FirstAidLearningPlatform;"
    },
    {
        "problem_id": "000000090",
        "complexity_level": 2,
        "image": "imgs/000000090/000000090.png",
        "instruction_layout": "This page is designed as a financial dashboard for real-time stock market tracking, divided into the Stock Ticker Display Area, Real-Time Charting Area, and Financial News Feed. The Stock Ticker Display Area is located at the top of the page, scrolling continuously with current stock prices and changes. The Real-Time Charting Area is in the center, featuring interactive charts displaying stock performance throughout the trading day. The Financial News Feed is at the bottom, offering the latest financial news updates relevant to the stock market.",
        "instruction_requirement": "The platform aims to provide investors with real-time updates on stock market conditions, aiding in informed decision-making. The stock ticker display should offer real-time pricing information with minimal latency. The charting area should provide detailed, interactive graphs for stock analysis over time. The financial news feed needs to dynamically update with the latest market-related news, ensuring users receive timely information. The interface should be highly responsive and efficient, tailored for professional investors who require up-to-date market insights.",
        "style": "html {font-size: 16px; background-color: #f4f4f4; color: #333;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.ticker-section { width: 100%; height: 50px; background-color: #ddd; overflow: hidden; position: relative; }\n.chart-section { width: 100%; padding: 20px; background-color: #fff; }\n.news-feed { width: 100%; padding: 20px; background-color: #eee; overflow-y: auto; }",
        "file_type": "js",
        "component": "import React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst FinancialDashboard = () => {\n  const [stocks, setStocks] = useState([{ name: 'AAPL', price: 150.10 }, { name: 'GOOGL', price: 2735.20 }]);\n  const [news, setNews] = useState(['Market opens mixed amid economic uncertainty', 'Tech stocks rally on earnings beat']);\n\n  useEffect(() => {\n    // Simulate real-time stock price updates\n    const interval = setInterval(() => {\n      setStocks(stocks.map(stock => ({ ...stock, price: stock.price * (1 + Math.random() * 0.005 - 0.0025) })));\n    }, 5000);\n    return () => clearInterval(interval);\n  }, [stocks]);\n\n  return (\n    <div className='container'>\n      <div className='ticker-section'>\n        {stocks.map((stock, index) => <div key={index}>{stock.name}: ${stock.price.toFixed(2)}</div>)}\n      </div>\n      <div className='chart-section'>\n        <ResponsiveContainer width='100%' height={300}>\n          <LineChart data={stocks}>\n            <Line type='monotone' dataKey='price' stroke='#8884d8' />\n            <CartesianGrid stroke='#ccc' />\n            <XAxis dataKey='name' />\n            <YAxis />\n            <Tooltip />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n      <div className='news-feed'>\n        {news.map((item, index) => <div key={index}>{item}</div>)}\n      </div>\n    </div>\n  );\n};\n\nexport default FinancialDashboard;"
    },
    {
        "problem_id": "000000091",
        "complexity_level": 2,
        "image": "imgs/000000091/000000091.png",
        "instruction_layout": "This page is designed as a project management dashboard for agile software development teams, featuring a Kanban board, sprint planning tool, and team collaboration chat interface. The Kanban board displays tasks as cards within columns that represent different stages of development. The sprint planning tool allows teams to allocate tasks to specific sprints and set deadlines. The team collaboration chat interface is integrated within the dashboard to facilitate real-time communication among team members.",
        "instruction_requirement": "The dashboard must enable teams to efficiently manage software development projects. The Kanban board should allow users to add, move, and delete task cards. The sprint planning tool must support sprint creation, task assignment, and progress tracking. The chat interface should support text messages and be accessible from any section of the dashboard. The entire system should be designed to facilitate quick updates and seamless interaction to boost productivity.",
        "style": "html {font-size: 16px; background-color: #e3e3e9; color: #333;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.kanban-board { width: 60%; height: 300px; display: flex; justify-content: space-between; background-color: #fff; border: 1px solid #ccc; }\n.sprint-planner { width: 60%; margin-top: 20px; background-color: #fff; padding: 20px; }\n.chat-interface { width: 60%; height: 300px; background-color: #f0f0f0; padding: 10px; border: 1px solid #ddd; overflow-y: auto; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst ProjectDashboard = () => {\n  const [tasks, setTasks] = useState([{ id: 1, name: 'API Development', status: 'ToDo' }, { id: 2, name: 'UI Mockup', status: 'InProgress' }]);\n  const [sprints, setSprints] = useState([{ id: 1, name: 'Sprint 1', tasks: [1, 2] }]);\n  const [messages, setMessages] = useState(['Welcome to the project chat!']);\n\n  const handleTaskStatusChange = (taskId, status) => {\n    setTasks(tasks.map(task => task.id === taskId ? { ...task, status } : task));\n  };\n\n  const handleSendMessage = (message) => {\n    setMessages([...messages, message]);\n  };\n\n  return (\n    <div className='container'>\n      <div className='kanban-board'>\n        {tasks.map((task, index) => <div key={index}>{task.name}: {task.status}</div>)}\n      </div>\n      <div className='sprint-planner'>\n        {sprints.map((sprint, index) => <div key={index}>{sprint.name}</div>)}\n      </div>\n      <div className='chat-interface'>\n        {messages.map((msg, index) => <div key={index}>{msg}</div>)}\n        <input type='text' onKeyPress={(e) => e.key === 'Enter' ? handleSendMessage(e.target.value) : null} />\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectDashboard;"
    },
    {
        "problem_id": "000000092",
        "complexity_level": 2,
        "image": "imgs/000000092/000000092.png",
        "instruction_layout": "This page is designed as a real-time collaborative budget management system, featuring a shared expense ledger, category-based spending limits, and live budget recalculation. The shared expense ledger allows multiple users to input expenses in real-time. The spending limit section shows preset limits for each category (e.g., food, travel, utilities), with color-coded indicators showing whether the budget is within or exceeding the limits. The live budget recalculation feature automatically adjusts available funds and category balances when new expenses are added by any user.",
        "instruction_requirement": "The system should allow multiple users to collaboratively manage a budget. The expense ledger must update live for all users as expenses are logged. The category-based spending limits should dynamically adjust based on input and display visual indicators for overspending. The interface should be able to handle simultaneous updates from multiple users while keeping calculations accurate. The user experience should be smooth and optimized for real-time interactions.",
        "style": "html {font-size: 16px; background-color: #f5f5f5; color: #333;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.ledger { width: 100%; padding: 20px; background-color: #fff; border: 1px solid #ccc; }\n.limits { width: 100%; margin-top: 20px; padding: 20px; background-color: #fff; border: 1px solid #ccc; }\n.limit-item { margin: 10px 0; }\n.budget-status { margin-top: 20px; padding: 10px; background-color: #e6ffe6; border: 1px solid #ccc; color: #2e7d32; }",
        "file_type": "js",
        "component": "import React, { useState, useEffect } from 'react';\n\nconst BudgetManagement = () => {\n  const [expenses, setExpenses] = useState([\n    { category: 'Food', amount: 50 },\n    { category: 'Travel', amount: 100 }\n  ]);\n  const [limits, setLimits] = useState({\n    Food: 200,\n    Travel: 300,\n    Utilities: 150\n  });\n  const [availableBudget, setAvailableBudget] = useState(1000);\n\n  useEffect(() => {\n    const totalSpent = expenses.reduce((sum, expense) => sum + expense.amount, 0);\n    setAvailableBudget(1000 - totalSpent);\n  }, [expenses]);\n\n  const addExpense = (category, amount) => {\n    setExpenses([...expenses, { category, amount }]);\n  };\n\n  return (\n    <div className='container'>\n      <div className='ledger'>\n        <h2>Shared Expense Ledger</h2>\n        {expenses.map((expense, index) => (\n          <div key={index}>{expense.category}: ${expense.amount}</div>\n        ))}\n        <button onClick={() => addExpense('Food', 20)}>Add $20 to Food</button>\n        <button onClick={() => addExpense('Travel', 50)}>Add $50 to Travel</button>\n      </div>\n      <div className='limits'>\n        <h2>Category Spending Limits</h2>\n        {Object.entries(limits).map(([category, limit], index) => (\n          <div key={index} className='limit-item'>\n            {category}: ${limit} limit, ${expenses.filter(e => e.category === category).reduce((sum, e) => sum + e.amount, 0)} spent\n          </div>\n        ))}\n      </div>\n      <div className='budget-status'>\n        Available Budget: ${availableBudget}\n      </div>\n    </div>\n  );\n};\n\nexport default BudgetManagement;"
    },
    {
        "problem_id": "000000093",
        "complexity_level": 2,
        "image": "imgs/000000093/000000093.png",
        "instruction_layout": "This page is designed as a peer-to-peer skill-sharing platform, featuring a skill marketplace, user rating system, and booking scheduler. The skill marketplace allows users to post their skills and services (e.g., guitar lessons, coding tutorials), which are displayed in a list with filtering options for categories like 'Music', 'Programming', and 'Cooking'. The user rating system displays average ratings for each user, with feedback provided by other participants. The booking scheduler enables users to book a session with a skill provider, showing their availability in a calendar format.",
        "instruction_requirement": "The platform should allow users to browse and filter skills offered by other users, book sessions based on availability, and leave ratings and feedback after a session. The rating system should update dynamically as new ratings are submitted. The booking scheduler must prevent double bookings and display available times clearly. The platform should ensure smooth real-time updates for both bookings and ratings.",
        "style": "html {font-size: 16px; background-color: #f9f9f9; color: #333;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.marketplace { width: 100%; padding: 20px; background-color: #fff; border: 1px solid #ccc; }\n.skill-item { margin: 10px 0; }\n.rating { margin-top: 20px; padding: 10px; background-color: #e6f7ff; border: 1px solid #b3e5fc; }\n.scheduler { width: 100%; margin-top: 20px; padding: 20px; background-color: #fff; border: 1px solid #ccc; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst SkillSharingPlatform = () => {\n  const [skills, setSkills] = useState([\n    { name: 'Guitar Lessons', category: 'Music', rating: 4.5, available: ['2024-10-16', '2024-10-18'] },\n    { name: 'JavaScript Basics', category: 'Programming', rating: 4.8, available: ['2024-10-17', '2024-10-20'] }\n  ]);\n  const [bookings, setBookings] = useState([]);\n  const [ratings, setRatings] = useState({});\n\n  const bookSkill = (skillName, date) => {\n    setBookings([...bookings, { skillName, date }]);\n  };\n\n  const leaveRating = (skillName, newRating) => {\n    const totalRatings = (ratings[skillName]?.total || 0) + 1;\n    const avgRating = ((ratings[skillName]?.rating || 0) * (totalRatings - 1) + newRating) / totalRatings;\n    setRatings({ ...ratings, [skillName]: { rating: avgRating, total: totalRatings } });\n  };\n\n  return (\n    <div className='container'>\n      <div className='marketplace'>\n        <h2>Skill Marketplace</h2>\n        {skills.map((skill, index) => (\n          <div key={index} className='skill-item'>\n            {skill.name} ({skill.category}) - Rating: {ratings[skill.name]?.rating || skill.rating}\n            <button onClick={() => bookSkill(skill.name, skill.available[0])}>Book {skill.available[0]}</button>\n            <button onClick={() => leaveRating(skill.name, 5)}>Rate 5 Stars</button>\n          </div>\n        ))}\n      </div>\n      <div className='scheduler'>\n        <h2>Booking Scheduler</h2>\n        {bookings.map((booking, index) => (\n          <div key={index}>{booking.skillName} booked for {booking.date}</div>\n        ))}\n      </div>\n      <div className='rating'>\n        <h2>Ratings</h2>\n        {Object.entries(ratings).map(([skillName, { rating, total }], index) => (\n          <div key={index}>{skillName}: {rating.toFixed(1)} (from {total} ratings)</div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SkillSharingPlatform;"
    },
    {
        "problem_id": "000000094",
        "complexity_level": 2,
        "image": "imgs/000000094/000000094.png",
        "instruction_layout": "This interface is designed for a plant monitoring system in a greenhouse, including sections for Environmental Controls, Plant Health Monitoring, and Automation Settings. The Environmental Controls area allows adjustment of temperature, humidity, and lighting conditions. The Plant Health Monitoring section displays health metrics for individual plants, using sensors to report moisture levels, nutrient status, and growth rates. The Automation Settings area enables users to set rules for automatic adjustments based on specific environmental conditions or plant health indicators.",
        "instruction_requirement": "The system must allow greenhouse operators to monitor and adjust conditions efficiently to promote optimal plant growth. The Environmental Controls should provide sliders and toggles for easy adjustment of parameters. The Plant Health Monitoring must dynamically update with real-time data from sensors, visually displaying the health status of each plant. The Automation Settings should allow users to create and modify automation rules that respond to environmental changes or plant needs, enhancing the greenhouse's operational efficiency. The interface should be intuitive, visually engaging, and provide immediate feedback to user interactions.",
        "style": "html {font-size: 16px; background-color: #f0f8ff; color: #5f6368;}\n.container { display: flex; flex-direction: column; justify-content: space-between; padding: 20px; }\n.controls-section { padding: 20px; background-color: #e3f2fd; border-radius: 5px; }\n.monitoring-section { padding: 20px; background-color: #e3f2fd; border-radius: 5px; overflow-y: auto; }\n.settings-section { padding: 20px; background-color: #e3f2fd; border-radius: 5px; }\n.sensor-item { padding: 10px; margin-bottom: 10px; background-color: #bbdefb; }\n.sensor-item:hover { background-color: #90caf9; }\n.toggle { padding: 10px 15px; background-color: #2196f3; color: white; border: none; border-radius: 3px; cursor: pointer; }\n.toggle:hover { background-color: #1976d2; }",
        "file_type": "js",
        "component": "import React, { useState, useEffect } from 'react';\n\nconst GreenhouseMonitor = () => {\n  const [environment, setEnvironment] = useState({ temperature: 22, humidity: 50, lightLevel: 200 });\n  const [plantHealth, setPlantHealth] = useState([{ plantId: '001', moisture: 40, nutrient: 'Good', growth: 7.5 }, { plantId: '002', moisture: 35, nutrient: 'Low', growth: 5.8 }]);\n  const [automationRules, setAutomationRules] = useState([]);\n\n  const handleEnvironmentChange = (param, value) => {\n    setEnvironment({ ...environment, [param]: value });\n  };\n\n  const handleAddRule = (rule) => {\n    setAutomationRules([...automationRules, rule]);\n  };\n\n  return (\n    <div className='container'>\n      <div className='controls-section'>\n        <h3>Environmental Controls</h3>\n        <button onClick={() => handleEnvironmentChange('temperature', environment.temperature + 1)}>Increase Temperature</button>\n        <button onClick={() => handleEnvironmentChange('humidity', environment.humidity + 5)}>Increase Humidity</button>\n        <button onClick={() => handleEnvironmentChange('lightLevel', environment.lightLevel + 20)}>Increase Light</button>\n      </div>\n      <div className='monitoring-section'>\n        <h3>Plant Health Monitoring</h3>\n        {plantHealth.map((plant, index) => <div key={index} className='sensor-item'>{`Plant ${plant.plantId} - Moisture: ${plant.moisture}% - Nutrient: ${plant.nutrient} - Growth: ${plant.growth}cm`}</div>)}\n      </div>\n      <div className='settings-section'>\n        <h3>Automation Settings</h3>\n        <button onClick={() => handleAddRule('New Rule')}>Add Rule</button>\n        {automationRules.map((rule, index) => <div key={index}>{rule}</div>)}\n      </div>\n    </div>\n  );\n};\n\nexport default GreenhouseMonitor;"
    },
    {
        "problem_id": "000000095",
        "complexity_level": 2,
        "image": "imgs/000000095/000000095.png",
        "instruction_layout": "This page is designed as a habit-building tracker application, featuring a daily habit tracker, streak counter, and motivational quotes generator. The daily habit tracker allows users to mark completed habits for each day in a calendar view. The streak counter keeps track of the number of consecutive days a habit has been maintained, with badges awarded for milestones. The motivational quotes generator displays a new inspirational quote every day to encourage users to stay consistent.",
        "instruction_requirement": "The platform should allow users to track multiple habits by marking them as complete on a calendar. The streak counter should automatically update when users complete a habit for consecutive days. The motivational quotes generator should display a new quote each day, pulled from a set of predefined quotes. The UI should be visually appealing, with smooth animations for marking habits and receiving milestone badges.",
        "style": "html {font-size: 16px; background-color: #f0f4f8; color: #2c3e50;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.habit-tracker { width: 100%; padding: 20px; background-color: #ffffff; border: 1px solid #ccc; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); }\n.habit-item { margin: 10px 0; display: flex; justify-content: space-between; }\n.streak-counter { width: 100%; margin-top: 20px; padding: 20px; background-color: #e8f5e9; border: 1px solid #ccc; color: #388e3c; text-align: center; }\n.motivation { width: 100%; margin-top: 20px; padding: 20px; background-color: #ffebee; border: 1px solid #f44336; text-align: center; font-style: italic; }",
        "file_type": "js",
        "component": "import React, { useState, useEffect } from 'react';\n\nconst HabitTrackerApp = () => {\n  const [habits, setHabits] = useState([\n    { name: 'Exercise', days: [true, false, true, true, false, true, false] },\n    { name: 'Read', days: [true, true, true, true, true, false, false] }\n  ]);\n  const [quotes, setQuotes] = useState([\n    'The journey of a thousand miles begins with one step.',\n    'Don’t watch the clock; do what it does. Keep going.',\n    'Success is the sum of small efforts, repeated day in and day out.'\n  ]);\n  const [streaks, setStreaks] = useState({ 'Exercise': 3, 'Read': 4 });\n  const [quoteOfDay, setQuoteOfDay] = useState('');\n\n  useEffect(() => {\n    const today = new Date().getDay();\n    setQuoteOfDay(quotes[today % quotes.length]);\n  }, [quotes]);\n\n  const toggleHabit = (habitName, dayIndex) => {\n    setHabits(habits.map(habit => habit.name === habitName ? {\n      ...habit,\n      days: habit.days.map((completed, index) => index === dayIndex ? !completed : completed)\n    } : habit));\n  };\n\n  return (\n    <div className='container'>\n      <div className='habit-tracker'>\n        <h2>Daily Habit Tracker</h2>\n        {habits.map((habit, index) => (\n          <div key={index} className='habit-item'>\n            <span>{habit.name}</span>\n            {habit.days.map((completed, dayIndex) => (\n              <button key={dayIndex} onClick={() => toggleHabit(habit.name, dayIndex)} style={{ backgroundColor: completed ? '#81c784' : '#e0e0e0' }}>\n                {completed ? '✓' : '✗'}\n              </button>\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className='streak-counter'>\n        <h2>Streak Counter</h2>\n        {Object.entries(streaks).map(([habitName, streak], index) => (\n          <div key={index}>{habitName}: {streak} days</div>\n        ))}\n      </div>\n      <div className='motivation'>\n        <h2>Motivational Quote of the Day</h2>\n        <p>{quoteOfDay}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default HabitTrackerApp;"
    },
    {
        "problem_id": "000000096",
        "complexity_level": 2,
        "image": "imgs/000000096/000000096.png",
        "instruction_layout": "This page is designed as an interactive story-writing collaboration platform, featuring a live text editor, branching storylines feature, and voting system. The live text editor allows multiple users to collaboratively write a story in real-time. The branching storyline tool enables users to suggest different plot directions at key decision points, creating alternative story paths. The voting system allows users to vote on the next part of the story, and the most voted option becomes the official continuation of the narrative.",
        "instruction_requirement": "The platform should allow users to collaboratively write and edit stories in real-time. At key points in the story, users can create branching paths, which appear as suggestions. The voting system should dynamically update as users vote, and the branch with the most votes will be selected as the next part of the story. The interface should handle multiple users working and voting simultaneously, with smooth real-time updates for writing, branching, and voting. The design must be elegant, visually engaging, and easy to navigate.",
        "style": "html {font-size: 16px; background-color: #fdf5e6; color: #4b3832;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.editor { width: 80%; padding: 20px; background-color: #fff7e6; border: 1px solid #d9a29e; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); margin-bottom: 20px; }\n.branching { width: 80%; padding: 20px; background-color: #faf0e6; border: 1px solid #c3b091; margin-bottom: 20px; }\n.vote { width: 80%; padding: 20px; background-color: #f9e6d4; border: 1px solid #d4a29c; text-align: center; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst StoryCollabApp = () => {\n  const [story, setStory] = useState('Once upon a time, in a faraway land...');\n  const [branches, setBranches] = useState([\n    { text: 'The hero embarks on a journey to find the lost treasure.', votes: 5 },\n    { text: 'The hero decides to protect the village from invaders.', votes: 8 }\n  ]);\n  const [votes, setVotes] = useState({});\n\n  const updateStory = (newText) => {\n    setStory(story + ' ' + newText);\n  };\n\n  const voteForBranch = (index) => {\n    const newBranches = [...branches];\n    newBranches[index].votes += 1;\n    setBranches(newBranches);\n  };\n\n  return (\n    <div className='container'>\n      <div className='editor'>\n        <h2>Live Story Editor</h2>\n        <p>{story}</p>\n        <textarea\n          rows='5'\n          placeholder='Write the next part...'\n          onBlur={(e) => updateStory(e.target.value)}\n        ></textarea>\n      </div>\n      <div className='branching'>\n        <h2>Branching Storylines</h2>\n        {branches.map((branch, index) => (\n          <div key={index}>\n            {branch.text} - Votes: {branch.votes}\n            <button onClick={() => voteForBranch(index)}>Vote</button>\n          </div>\n        ))}\n      </div>\n      <div className='vote'>\n        <h2>Vote for the Next Part of the Story</h2>\n        {branches.map((branch, index) => (\n          <div key={index}>{branch.text} - {branch.votes} votes</div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default StoryCollabApp;"
    },
    {
        "problem_id": "000000097",
        "complexity_level": 2,
        "image": "imgs/000000097/000000097.png",
        "instruction_layout": "This page is designed as a personalized fitness workout generator, featuring a custom workout planner, a progress tracker, and a workout log. The workout planner allows users to create tailored workouts based on their goals, such as strength, cardio, or flexibility. The progress tracker visualizes performance over time, showing metrics such as workout frequency, weight lifted, or distance run. The workout log enables users to log each session, capturing key details like sets, reps, and duration. The interface should provide a motivating and clean design.",
        "instruction_requirement": "The system should let users create customized workout plans, track their progress, and log their workout details. The progress tracker should update dynamically based on the logged workout data, visualizing progress over time. The interface needs to be intuitive and engaging, with smooth animations and real-time updates to make fitness tracking enjoyable and easy. The workout planner should suggest exercises based on the user's fitness goals, and the log should retain detailed history for future reference.",
        "style": "html {font-size: 16px; background-color: #eef2f3; color: #2c3e50;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.planner { width: 80%; padding: 20px; background-color: #ffffff; border-radius: 10px; border: 1px solid #ddd; margin-bottom: 20px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); }\n.tracker { width: 80%; padding: 20px; background-color: #f5f9f9; border-radius: 10px; border: 1px solid #ccc; margin-bottom: 20px; }\n.log { width: 80%; padding: 20px; background-color: #fafafa; border-radius: 10px; border: 1px solid #bbb; margin-bottom: 20px; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst WorkoutApp = () => {\n  const [workoutPlan, setWorkoutPlan] = useState([\n    { name: 'Push-Ups', type: 'Strength', sets: 3, reps: 15 },\n    { name: 'Running', type: 'Cardio', duration: 30, distance: 5 }\n  ]);\n  const [workoutLog, setWorkoutLog] = useState([]);\n  const [progress, setProgress] = useState([\n    { date: '2024-10-01', workout: 'Push-Ups', sets: 3, reps: 15 },\n    { date: '2024-10-02', workout: 'Running', distance: 5, duration: 30 }\n  ]);\n\n  const addWorkoutLog = (workout) => {\n    setWorkoutLog([...workoutLog, workout]);\n  };\n\n  return (\n    <div className='container'>\n      <div className='planner'>\n        <h2>Custom Workout Planner</h2>\n        {workoutPlan.map((exercise, index) => (\n          <div key={index}>\n            {exercise.name} - {exercise.type} {exercise.sets ? `- ${exercise.sets} sets of ${exercise.reps}` : `- ${exercise.duration} mins / ${exercise.distance} km`}\n          </div>\n        ))}\n      </div>\n      <div className='tracker'>\n        <h2>Progress Tracker</h2>\n        {progress.map((entry, index) => (\n          <div key={index}>{entry.date}: {entry.workout} - {entry.sets ? `${entry.sets} sets of ${entry.reps}` : `${entry.distance} km in ${entry.duration} mins`}</div>\n        ))}\n      </div>\n      <div className='log'>\n        <h2>Workout Log</h2>\n        {workoutLog.map((log, index) => (\n          <div key={index}>{log.date} - {log.workout} - {log.details}</div>\n        ))}\n        <button onClick={() => addWorkoutLog({ date: '2024-10-10', workout: 'Push-Ups', details: '3 sets of 20 reps' })}>Log Workout</button>\n      </div>\n    </div>\n  );\n};\n\nexport default WorkoutApp;"
    },
    {
        "problem_id": "000000098",
        "complexity_level": 2,
        "image": "imgs/000000098/000000098.png",
        "instruction_layout": "This page is designed as a real-time brainstorming tool for collaborative idea generation. It features an idea submission board, a voting system for idea prioritization, and a timer for timed brainstorming sessions. The idea submission board allows participants to submit new ideas, which appear instantly for all collaborators. The voting system lets users vote on their favorite ideas, and ideas are ranked by the number of votes. The timer controls the duration of the brainstorming session, providing real-time countdowns.",
        "instruction_requirement": "The system should support real-time collaboration where multiple users can submit ideas, vote on the best ones, and see live updates. The timer should allow users to set time limits for brainstorming sessions, and when the time is up, voting is disabled. The interface should be smooth, highly responsive, and visually appealing to encourage creative participation. The voting results should update dynamically, with the most popular ideas highlighted.",
        "style": "html {font-size: 16px; background-color: #eef0f3; color: #34495e;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.board { width: 80%; padding: 20px; background-color: #ffffff; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); margin-bottom: 20px; }\n.idea-item { display: flex; justify-content: space-between; margin: 10px 0; padding: 10px; background-color: #f9f9f9; border: 1px solid #ccc; border-radius: 5px; }\n.timer { width: 80%; padding: 20px; background-color: #dff9fb; border-radius: 10px; text-align: center; font-size: 24px; margin-bottom: 20px; }\n.voting { width: 80%; padding: 20px; background-color: #fcf3cf; border-radius: 10px; text-align: center; }",
        "file_type": "js",
        "component": "import React, { useState, useEffect } from 'react';\n\nconst BrainstormingTool = () => {\n  const [ideas, setIdeas] = useState([\n    { text: 'Create a mobile app for productivity', votes: 5 },\n    { text: 'Develop a web platform for freelancers', votes: 7 }\n  ]);\n  const [timer, setTimer] = useState(300); // 5 minutes timer\n  const [votingEnabled, setVotingEnabled] = useState(true);\n\n  useEffect(() => {\n    if (timer > 0) {\n      const countdown = setInterval(() => setTimer(timer - 1), 1000);\n      return () => clearInterval(countdown);\n    } else {\n      setVotingEnabled(false);\n    }\n  }, [timer]);\n\n  const addIdea = (text) => {\n    setIdeas([...ideas, { text, votes: 0 }]);\n  };\n\n  const voteIdea = (index) => {\n    if (!votingEnabled) return;\n    const newIdeas = [...ideas];\n    newIdeas[index].votes += 1;\n    setIdeas(newIdeas);\n  };\n\n  return (\n    <div className='container'>\n      <div className='timer'>Time Remaining: {Math.floor(timer / 60)}:{('0' + (timer % 60)).slice(-2)}</div>\n      <div className='board'>\n        <h2>Idea Submission Board</h2>\n        {ideas.map((idea, index) => (\n          <div key={index} className='idea-item'>\n            {idea.text}\n            <button onClick={() => voteIdea(index)} disabled={!votingEnabled}>Vote ({idea.votes})</button>\n          </div>\n        ))}\n        <input type='text' placeholder='Submit new idea' onKeyPress={(e) => e.key === 'Enter' && addIdea(e.target.value)} />\n      </div>\n      <div className='voting'>\n        <h2>Vote for Your Favorite Ideas</h2>\n        {votingEnabled ? <p>Voting is open, cast your votes!</p> : <p>Voting has ended.</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default BrainstormingTool;"
    },
    {
        "problem_id": "000000099",
        "complexity_level": 2,
        "image": "imgs/000000099/000000099.png",
        "instruction_layout": "This page is designed as a decentralized task management platform for remote teams, featuring a task board, peer review system, and real-time notifications. The task board is divided into columns like 'To Do', 'In Progress', and 'Completed'. Users can drag and drop tasks between columns, and each task includes a status, priority, and description. The peer review system allows team members to review completed tasks before they are officially marked as done, and they can provide feedback or approve tasks. Real-time notifications keep team members updated on task changes, new assignments, and feedback.",
        "instruction_requirement": "The platform should allow team members to manage tasks in a collaborative environment, using a kanban-style task board. The peer review system must enable users to provide feedback on tasks and approve them. The real-time notification system should push updates about task changes, feedback, and assignments instantly. The interface should be clean, responsive, and optimized for team collaboration, with drag-and-drop interactions for task movement and real-time feedback on task completion.",
        "style": "html {font-size: 16px; background-color: #f0f4f8; color: #2c3e50;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.task-board { width: 100%; padding: 20px; background-color: #ffffff; border-radius: 10px; border: 1px solid #ddd; display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; margin-bottom: 20px; }\n.column { padding: 10px; background-color: #f9f9f9; border: 1px solid #ccc; border-radius: 5px; min-height: 200px; }\n.task-item { margin: 10px 0; padding: 10px; background-color: #f0f9ff; border-radius: 5px; border: 1px solid #ddd; }\n.notifications { width: 100%; padding: 20px; background-color: #e0f7fa; border-radius: 10px; text-align: center; margin-bottom: 20px; }",
        "file_type": "js",
        "component": "import React, { useState, useEffect } from 'react';\n\nconst TaskManagementApp = () => {\n  const [tasks, setTasks] = useState({\n    todo: [\n      { id: 1, text: 'Design homepage', priority: 'High' },\n      { id: 2, text: 'Write API documentation', priority: 'Medium' }\n    ],\n    inProgress: [],\n    completed: []\n  });\n  const [notifications, setNotifications] = useState(['You have a new task assigned!', 'Task \"Design homepage\" has been approved.']);\n\n  const moveTask = (taskId, from, to) => {\n    const taskToMove = tasks[from].find(task => task.id === taskId);\n    setTasks({\n      ...tasks,\n      [from]: tasks[from].filter(task => task.id !== taskId),\n      [to]: [...tasks[to], taskToMove]\n    });\n  };\n\n  return (\n    <div className='container'>\n      <div className='task-board'>\n        <div className='column'>\n          <h3>To Do</h3>\n          {tasks.todo.map(task => (\n            <div key={task.id} className='task-item'>\n              {task.text} ({task.priority})\n              <button onClick={() => moveTask(task.id, 'todo', 'inProgress')}>Start</button>\n            </div>\n          ))}\n        </div>\n        <div className='column'>\n          <h3>In Progress</h3>\n          {tasks.inProgress.map(task => (\n            <div key={task.id} className='task-item'>\n              {task.text} ({task.priority})\n              <button onClick={() => moveTask(task.id, 'inProgress', 'completed')}>Complete</button>\n            </div>\n          ))}\n        </div>\n        <div className='column'>\n          <h3>Completed</h3>\n          {tasks.completed.map(task => (\n            <div key={task.id} className='task-item'>\n              {task.text} ({task.priority})\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className='notifications'>\n        <h2>Notifications</h2>\n        {notifications.map((note, index) => (\n          <div key={index}>{note}</div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TaskManagementApp;"
    },
    {
        "problem_id": "000000100",
        "complexity_level": 2,
        "image": "imgs/000000100/000000100.png",
        "instruction_layout": "This page is designed as an interactive personal finance management tool, featuring a monthly budget planner, an expense tracker with categories, and a savings goal dashboard. The budget planner allows users to input their expected income and expenses, which are categorized (e.g., groceries, utilities, entertainment). The expense tracker dynamically logs daily spending, and the savings goal dashboard visually tracks the progress towards a specific goal. Users can adjust budget allocations, log expenses, and track savings in real-time.",
        "instruction_requirement": "The system should allow users to plan their monthly budgets, log expenses by category, and track their savings progress towards a defined goal. The budget planner should be customizable, allowing users to adjust allocations, and the expense tracker should categorize spending dynamically. The savings goal dashboard should visualize progress with a circular progress bar. The interface must be sleek and user-friendly, with smooth animations for budget adjustments and real-time updates for expense logging and savings progress.",
        "style": "html {font-size: 16px; background-color: #f5f5f5; color: #2c3e50;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.budget-planner { width: 80%; padding: 20px; background-color: #ffffff; border-radius: 12px; border: 1px solid #ddd; margin-bottom: 20px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); }\n.expense-tracker { width: 80%; padding: 20px; background-color: #fafafa; border-radius: 12px; border: 1px solid #ccc; margin-bottom: 20px; }\n.savings-goal { width: 80%; padding: 20px; background-color: #e3f2fd; border-radius: 12px; border: 1px solid #64b5f6; text-align: center; }\n.progress-bar { width: 150px; height: 150px; border-radius: 50%; background-color: #f9f9f9; border: 8px solid #4caf50; display: flex; align-items: center; justify-content: center; font-size: 24px; font-weight: bold; color: #388e3c; }",
        "file_type": "js",
        "component": "import React, { useState, useEffect } from 'react';\n\nconst FinanceManager = () => {\n  const [budget, setBudget] = useState({\n    income: 3000,\n    categories: {\n      groceries: 400,\n      utilities: 200,\n      entertainment: 150,\n      savings: 500\n    }\n  });\n  const [expenses, setExpenses] = useState([\n    { category: 'groceries', amount: 50, date: '2024-10-10' },\n    { category: 'entertainment', amount: 30, date: '2024-10-11' }\n  ]);\n  const [savingsGoal, setSavingsGoal] = useState({ goal: 5000, saved: 1200 });\n\n  const addExpense = (category, amount) => {\n    setExpenses([...expenses, { category, amount, date: new Date().toISOString().split('T')[0] }]);\n  };\n\n  const calculateProgress = () => {\n    return Math.min((savingsGoal.saved / savingsGoal.goal) * 100, 100).toFixed(0);\n  };\n\n  return (\n    <div className='container'>\n      <div className='budget-planner'>\n        <h2>Monthly Budget Planner</h2>\n        <div>Income: ${budget.income}</div>\n        {Object.entries(budget.categories).map(([category, amount], index) => (\n          <div key={index}>{category}: ${amount}</div>\n        ))}\n      </div>\n      <div className='expense-tracker'>\n        <h2>Expense Tracker</h2>\n        {expenses.map((expense, index) => (\n          <div key={index}>{expense.date} - {expense.category}: ${expense.amount}</div>\n        ))}\n        <button onClick={() => addExpense('groceries', 25)}>Add $25 to Groceries</button>\n      </div>\n      <div className='savings-goal'>\n        <h2>Savings Goal</h2>\n        <div className='progress-bar'>{calculateProgress()}%</div>\n        <p>Goal: ${savingsGoal.goal}</p>\n        <p>Saved: ${savingsGoal.saved}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default FinanceManager;"
    },
    {
        "problem_id": "000000101",
        "complexity_level": 2,
        "image": "imgs/000000101/000000101.png",
        "instruction_layout": "This page is designed as an interactive book reading tracker, featuring a book library, a reading progress dashboard, and a personalized reading schedule. The book library allows users to add books, mark them as 'Reading', 'Completed', or 'Want to Read'. The reading progress dashboard tracks the number of pages read and estimates the completion date based on daily reading speed. The personalized reading schedule generates a suggested daily reading goal based on the user’s desired completion date and the total number of pages remaining.",
        "instruction_requirement": "The system should allow users to manage their book reading habits by adding books to their library, tracking reading progress, and setting a personalized reading schedule. The dashboard must dynamically update the estimated completion time based on daily reading progress. The reading schedule should be adjustable, allowing users to set flexible goals depending on how quickly they want to finish each book. The design should be clean, modern, and visually engaging, with interactive components to motivate consistent reading.",
        "style": "html {font-size: 16px; background-color: #f7f9fb; color: #2e4053;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.library { width: 90%; padding: 20px; background-color: #ffffff; border-radius: 10px; border: 1px solid #dfe6e9; margin-bottom: 20px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); }\n.book-item { margin: 10px 0; padding: 10px; background-color: #f0f8ff; border-radius: 5px; display: flex; justify-content: space-between; }\n.progress-dashboard { width: 90%; padding: 20px; background-color: #e8f8f5; border-radius: 10px; border: 1px solid #76d7c4; margin-bottom: 20px; text-align: center; }\n.schedule { width: 90%; padding: 20px; background-color: #fef9e7; border-radius: 10px; border: 1px solid #f7dc6f; text-align: center; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst ReadingTrackerApp = () => {\n  const [library, setLibrary] = useState([\n    { title: '1984', status: 'Reading', pages: 328, pagesRead: 120 },\n    { title: 'Brave New World', status: 'Completed', pages: 268, pagesRead: 268 },\n    { title: 'To Kill a Mockingbird', status: 'Want to Read', pages: 281, pagesRead: 0 }\n  ]);\n  const [schedule, setSchedule] = useState({ targetDate: '2024-12-01', dailyGoal: 20 });\n\n  const updateProgress = (title, pagesRead) => {\n    setLibrary(library.map(book => \n      book.title === title ? { ...book, pagesRead: Math.min(book.pages, book.pagesRead + pagesRead) } : book));\n  };\n\n  const adjustDailyGoal = (newGoal) => {\n    setSchedule({ ...schedule, dailyGoal: newGoal });\n  };\n\n  return (\n    <div className='container'>\n      <div className='library'>\n        <h2>My Book Library</h2>\n        {library.map((book, index) => (\n          <div key={index} className='book-item'>\n            {book.title} - {book.status} - {book.pagesRead}/{book.pages} pages read\n            {book.status === 'Reading' && <button onClick={() => updateProgress(book.title, 10)}>Read 10 more pages</button>}\n          </div>\n        ))}\n      </div>\n      <div className='progress-dashboard'>\n        <h2>Reading Progress Dashboard</h2>\n        <p>You are reading {library[0].title} and have read {library[0].pagesRead} of {library[0].pages} pages.</p>\n        <p>Based on your daily goal of {schedule.dailyGoal} pages, you will finish by {schedule.targetDate}.</p>\n      </div>\n      <div className='schedule'>\n        <h2>Personalized Reading Schedule</h2>\n        <p>Current Daily Goal: {schedule.dailyGoal} pages</p>\n        <button onClick={() => adjustDailyGoal(25)}>Increase Goal to 25 pages/day</button>\n        <button onClick={() => adjustDailyGoal(15)}>Decrease Goal to 15 pages/day</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ReadingTrackerApp;"
    },
    {
        "problem_id": "000000102",
        "complexity_level": 2,
        "image": "imgs/000000102/000000102.png",
        "instruction_layout": "This page is a task automation and workflow builder for business teams. It features a visual workflow builder, automation rule editor, and a task execution dashboard. The workflow builder uses drag-and-drop components where users can create workflows by connecting steps such as data input, decision branches, and task assignments. The automation rule editor allows users to define conditional triggers and actions (e.g., 'if task is delayed, notify manager'). The task execution dashboard shows the live status of workflows, including active tasks, completed tasks, and automation rule triggers.",
        "instruction_requirement": "The system should provide users with the ability to visually create workflows by dragging and connecting predefined components. The automation rule editor must allow defining 'if-this-then-that' style rules that trigger actions when certain conditions are met. The task execution dashboard should offer real-time updates on ongoing workflows, tracking progress and displaying any triggered automation rules. The interface should be intuitive and visually appealing, with smooth animations and clean, modern UI elements to enhance user engagement.",
        "style": "html {font-size: 16px; background-color: #f5f7fa; color: #34495e;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.workflow-builder { width: 90%; padding: 20px; background-color: #ffffff; border-radius: 12px; border: 1px solid #dfe6e9; margin-bottom: 20px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); }\n.task-item { margin: 10px 0; padding: 10px; background-color: #ecf0f1; border-radius: 5px; display: flex; justify-content: space-between; }\n.rule-editor { width: 90%; padding: 20px; background-color: #f8f9f9; border-radius: 12px; border: 1px solid #e1e1e1; margin-bottom: 20px; text-align: center; }\n.execution-dashboard { width: 90%; padding: 20px; background-color: #eaf2f8; border-radius: 12px; border: 1px solid #aeb6bf; text-align: center; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst WorkflowAutomationApp = () => {\n  const [workflow, setWorkflow] = useState([\n    { task: 'Input Data', status: 'Pending' },\n    { task: 'Validate Data', status: 'In Progress' },\n    { task: 'Send Notification', status: 'Not Started' }\n  ]);\n  const [rules, setRules] = useState([\n    { condition: 'If task delayed', action: 'Notify Manager', triggered: false }\n  ]);\n  const [executions, setExecutions] = useState([\n    { workflow: 'Data Processing', status: 'Running', activeTask: 'Validate Data' }\n  ]);\n\n  const updateWorkflowStatus = (index, status) => {\n    setWorkflow(workflow.map((task, i) =>\n      i === index ? { ...task, status } : task\n    ));\n  };\n\n  return (\n    <div className='container'>\n      <div className='workflow-builder'>\n        <h2>Workflow Builder</h2>\n        {workflow.map((task, index) => (\n          <div key={index} className='task-item'>\n            {task.task} - {task.status}\n            <button onClick={() => updateWorkflowStatus(index, 'Completed')}>Mark as Completed</button>\n          </div>\n        ))}\n      </div>\n      <div className='rule-editor'>\n        <h2>Automation Rule Editor</h2>\n        {rules.map((rule, index) => (\n          <div key={index}>{rule.condition} - {rule.action}</div>\n        ))}\n      </div>\n      <div className='execution-dashboard'>\n        <h2>Task Execution Dashboard</h2>\n        {executions.map((execution, index) => (\n          <div key={index}>{execution.workflow} - {execution.status} (Active Task: {execution.activeTask})</div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default WorkflowAutomationApp;"
    },
    {
        "problem_id": "000000103",
        "complexity_level": 2,
        "image": "imgs/000000103/000000103.png",
        "instruction_layout": "This page is designed as a modern, interactive travel itinerary planner with three key sections: 'Destination Selector', 'Itinerary Timeline', and 'Budget Overview'. Users can select destinations from a dynamic dropdown menu, add activities or events to specific days in the itinerary timeline, and input costs for each activity in the budget overview. The system will calculate the total trip cost and show the budget breakdown. The itinerary timeline is fully interactive, allowing users to drag and drop events to rearrange the schedule. The budget overview updates automatically as users add or modify activities.",
        "instruction_requirement": "The page must offer a dynamic and sleek interface for planning trips, allowing users to select destinations, create itineraries with drag-and-drop functionality, and track their budget. The budget section should update in real time, reflecting the total cost as users add activities. The timeline must allow users to rearrange activities visually. The design should be visually appealing, with animations and a modern UI, ensuring users can manage their trips efficiently while staying within budget.",
        "style": "html {font-size: 16px; background-color: #f8f9fa; color: #2c3e50;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.destination-selector { width: 90%; padding: 20px; background-color: #ffffff; border-radius: 12px; border: 1px solid #ddd; margin-bottom: 20px; }\n.timeline { width: 90%; padding: 20px; background-color: #ffffff; border-radius: 12px; border: 1px solid #ddd; margin-bottom: 20px; display: flex; flex-direction: column; }\n.timeline-event { padding: 10px; background-color: #ecf0f1; border-radius: 5px; margin-bottom: 10px; display: flex; justify-content: space-between; cursor: move; }\n.budget-overview { width: 90%; padding: 20px; background-color: #f7e6ff; border-radius: 12px; border: 1px solid #bdc3c7; text-align: center; }\n.total-budget { font-size: 18px; font-weight: bold; color: #16a085; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst TravelPlannerApp = () => {\n  const [destinations, setDestinations] = useState(['New York', 'Tokyo', 'Paris']);\n  const [selectedDestination, setSelectedDestination] = useState('New York');\n  const [itinerary, setItinerary] = useState([\n    { day: 'Day 1', event: 'Arrive and check-in at hotel', cost: 150 },\n    { day: 'Day 2', event: 'City tour and museum visit', cost: 100 }\n  ]);\n  const [budget, setBudget] = useState(itinerary.reduce((acc, item) => acc + item.cost, 0));\n\n  const addEvent = (newEvent) => {\n    const updatedItinerary = [...itinerary, newEvent];\n    setItinerary(updatedItinerary);\n    setBudget(updatedItinerary.reduce((acc, item) => acc + item.cost, 0));\n  };\n\n  return (\n    <div className='container'>\n      <div className='destination-selector'>\n        <h2>Select Destination</h2>\n        <select value={selectedDestination} onChange={(e) => setSelectedDestination(e.target.value)}>\n          {destinations.map((destination, index) => (\n            <option key={index} value={destination}>{destination}</option>\n          ))}\n        </select>\n      </div>\n      <div className='timeline'>\n        <h2>Itinerary Timeline</h2>\n        {itinerary.map((item, index) => (\n          <div key={index} className='timeline-event'>\n            {item.day} - {item.event} - ${item.cost}\n          </div>\n        ))}\n        <button onClick={() => addEvent({ day: 'Day 3', event: 'Beach day', cost: 50 })}>Add Event</button>\n      </div>\n      <div className='budget-overview'>\n        <h2>Budget Overview</h2>\n        <div>Total Trip Cost: <span className='total-budget'>${budget}</span></div>\n      </div>\n    </div>\n  );\n};\n\nexport default TravelPlannerApp;"
    },
    {
        "problem_id": "000000104",
        "complexity_level": 2,
        "image": "imgs/000000104/000000104.png",
        "instruction_layout": "This page is designed as a modern collaborative project management dashboard for remote teams. It features a team activity feed, a Kanban board for task tracking, and a project milestone tracker. The team activity feed displays real-time updates from team members, including new tasks, comments, and completed tasks. The Kanban board allows users to drag and drop tasks between columns like 'To Do', 'In Progress', and 'Completed'. The milestone tracker provides a visual progress bar that updates as tasks are completed, showing how close the team is to achieving key project milestones.",
        "instruction_requirement": "The system should offer an interactive and real-time project management dashboard. The team activity feed must display live updates from all team members. The Kanban board should have drag-and-drop functionality, allowing tasks to be moved between stages, and the milestone tracker should dynamically update based on task completion. The interface should be visually appealing, with smooth transitions and a clear, modern design that promotes team collaboration. The dashboard must support multiple users simultaneously working and updating tasks.",
        "style": "html {font-size: 16px; background-color: #f4f7f9; color: #2d3436;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.activity-feed { width: 80%; padding: 20px; background-color: #ffffff; border-radius: 12px; border: 1px solid #ddd; margin-bottom: 20px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); overflow-y: scroll; max-height: 300px; }\n.kanban-board { width: 80%; padding: 20px; background-color: #ffffff; border-radius: 12px; border: 1px solid #ddd; margin-bottom: 20px; display: flex; justify-content: space-between; }\n.kanban-column { width: 30%; padding: 10px; background-color: #f1f2f6; border-radius: 8px; display: flex; flex-direction: column; }\n.task-card { margin: 10px 0; padding: 10px; background-color: #dfe6e9; border-radius: 5px; cursor: move; }\n.milestone-tracker { width: 80%; padding: 20px; background-color: #fef9e7; border-radius: 12px; border: 1px solid #f7dc6f; text-align: center; }\n.progress-bar { width: 100%; height: 20px; background-color: #e0e0e0; border-radius: 12px; overflow: hidden; }\n.progress { height: 100%; background-color: #27ae60; border-radius: 12px; text-align: center; color: white; font-weight: bold; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst ProjectManagementApp = () => {\n  const [activityFeed, setActivityFeed] = useState([\n    'Alice completed the task: Design Wireframes',\n    'Bob started the task: API Integration'\n  ]);\n  const [kanban, setKanban] = useState({\n    todo: ['Task 1: Initial Setup', 'Task 2: Research Competitors'],\n    inProgress: ['Task 3: Develop Landing Page'],\n    completed: ['Task 4: Create Prototype']\n  });\n  const [milestoneProgress, setMilestoneProgress] = useState(50);\n\n  const moveTask = (from, to, taskIndex) => {\n    const task = kanban[from][taskIndex];\n    const updatedFrom = kanban[from].filter((_, index) => index !== taskIndex);\n    const updatedTo = [...kanban[to], task];\n    setKanban({ ...kanban, [from]: updatedFrom, [to]: updatedTo });\n    if (to === 'completed') setMilestoneProgress(milestoneProgress + 10);\n  };\n\n  return (\n    <div className='container'>\n      <div className='activity-feed'>\n        <h2>Team Activity Feed</h2>\n        {activityFeed.map((activity, index) => (\n          <div key={index}>{activity}</div>\n        ))}\n      </div>\n      <div className='kanban-board'>\n        <div className='kanban-column'>\n          <h3>To Do</h3>\n          {kanban.todo.map((task, index) => (\n            <div key={index} className='task-card' onClick={() => moveTask('todo', 'inProgress', index)}>\n              {task}\n            </div>\n          ))}\n        </div>\n        <div className='kanban-column'>\n          <h3>In Progress</h3>\n          {kanban.inProgress.map((task, index) => (\n            <div key={index} className='task-card' onClick={() => moveTask('inProgress', 'completed', index)}>\n              {task}\n            </div>\n          ))}\n        </div>\n        <div className='kanban-column'>\n          <h3>Completed</h3>\n          {kanban.completed.map((task, index) => (\n            <div key={index} className='task-card'>{task}</div>\n          ))}\n        </div>\n      </div>\n      <div className='milestone-tracker'>\n        <h2>Project Milestone Tracker</h2>\n        <div className='progress-bar'>\n          <div className='progress' style={{ width: `${milestoneProgress}%` }}>{milestoneProgress}%</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectManagementApp;"
    },
    {
        "problem_id": "000000105",
        "complexity_level": 2,
        "image": "imgs/000000105/000000105.png",
        "instruction_layout": "This page is designed as a modern, interactive financial portfolio tracker for personal investment management. It features a portfolio summary with stock and asset breakdowns, a transaction history table, and a profit/loss chart. Users can view their portfolio's total value, current holdings, and asset allocation percentages. The transaction history table logs all buys, sells, and dividends with filters for date, type, and stock. The profit/loss chart visually displays the portfolio's performance over time with dynamic timeframes such as '1M', '3M', '6M', and '1Y'. Users can also add new transactions directly from the page, and all data updates in real-time.",
        "instruction_requirement": "The system should provide a visually engaging and highly interactive portfolio management tool. Users should be able to filter and view their transaction history, dynamically track portfolio performance over custom timeframes, and see real-time updates on their asset values and allocations. The portfolio breakdown should include pie charts or graphs, while the transaction history should be displayed in a sortable, filterable table. The interface should feel modern and responsive, with smooth animations and a clean design that reflects the professionalism of a financial tool.",
        "style": "html {font-size: 16px; background-color: #f7f9fc; color: #34495e;}\n.container { display: flex; flex-direction: column; align-items: center; padding: 20px; }\n.portfolio-summary { width: 90%; padding: 20px; background-color: #ffffff; border-radius: 15px; border: 1px solid #dfe6e9; margin-bottom: 20px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); }\n.transaction-history { width: 90%; padding: 20px; background-color: #ffffff; border-radius: 12px; border: 1px solid #ddd; margin-bottom: 20px; }\n.history-row { display: flex; justify-content: space-between; padding: 10px; background-color: #ecf0f1; border-radius: 8px; margin-bottom: 10px; }\n.profit-loss-chart { width: 90%; padding: 20px; background-color: #fef9e7; border-radius: 12px; border: 1px solid #f7dc6f; text-align: center; }\n.chart-bar { height: 20px; background-color: #3498db; border-radius: 12px; text-align: center; color: white; font-weight: bold; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst FinancialPortfolioTracker = () => {\n  const [portfolio, setPortfolio] = useState({ totalValue: 50000, stocks: 60, bonds: 30, cash: 10 });\n  const [transactions, setTransactions] = useState([\n    { date: '2024-01-15', type: 'Buy', asset: 'AAPL', amount: 5000 },\n    { date: '2024-02-10', type: 'Sell', asset: 'GOOGL', amount: 2000 }\n  ]);\n  const [profitLoss, setProfitLoss] = useState(12);\n\n  const addTransaction = () => {\n    const newTransaction = { date: '2024-03-01', type: 'Buy', asset: 'TSLA', amount: 3000 };\n    setTransactions([...transactions, newTransaction]);\n  };\n\n  return (\n    <div className='container'>\n      <div className='portfolio-summary'>\n        <h2>Portfolio Summary</h2>\n        <p>Total Value: ${portfolio.totalValue}</p>\n        <p>Stocks: {portfolio.stocks}%</p>\n        <p>Bonds: {portfolio.bonds}%</p>\n        <p>Cash: {portfolio.cash}%</p>\n      </div>\n      <div className='transaction-history'>\n        <h2>Transaction History</h2>\n        {transactions.map((transaction, index) => (\n          <div key={index} className='history-row'>\n            <span>{transaction.date}</span>\n            <span>{transaction.type}</span>\n            <span>{transaction.asset}</span>\n            <span>${transaction.amount}</span>\n          </div>\n        ))}\n        <button onClick={addTransaction}>Add Transaction</button>\n      </div>\n      <div className='profit-loss-chart'>\n        <h2>Profit/Loss</h2>\n        <div className='chart-bar' style={{ width: `${profitLoss}%` }}>{profitLoss}%</div>\n      </div>\n    </div>\n  );\n};\n\nexport default FinancialPortfolioTracker;"
    },
    {
        "problem_id": "000000106",
        "complexity_level": 2,
        "image": "imgs/000000106/000000106.png",
        "instruction_layout": "This page is designed as a dynamic book club management platform. It features a 'Book Selection' panel, 'Member Discussion Threads', and a 'Reading Progress Tracker'. Users can vote on books to read next, view and participate in discussion threads, and update their reading progress. The book selection panel displays a carousel of current book options, where users can vote for their preferred book. The discussion section allows members to post and reply to threads about the book currently being read. The reading progress tracker lets members log their reading completion percentage and view group-wide progress in real time.",
        "instruction_requirement": "The system must provide an interactive platform for managing a book club. Users can vote on upcoming books in a carousel, participate in discussion threads about the current book, and log their personal reading progress. The progress tracker should display both the user's individual progress and the group's collective progress. The design should feel modern, with smooth transitions, vibrant colors, and clear typography. Each section should be easily navigable, with interactive elements to enhance user engagement.",
        "style": "html {font-size: 16px; background-color: #f0f3f5; color: #34495e; font-family: 'Poppins', sans-serif;}\n.container { display: grid; grid-template-columns: 1fr 2fr; grid-gap: 20px; padding: 30px; }\n.book-selection { grid-column: span 2; background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); padding: 20px; margin-bottom: 20px; }\n.carousel { display: flex; overflow-x: scroll; }\n.carousel-item { min-width: 200px; margin-right: 15px; padding: 20px; background-color: #ecf0f1; border-radius: 10px; text-align: center; }\n.discussions { background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); padding: 20px; }\n.thread { padding: 10px 0; border-bottom: 1px solid #dfe6e9; }\n.thread:last-child { border-bottom: none; }\n.progress-tracker { background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); padding: 20px; text-align: center; }\n.progress-bar-container { width: 100%; height: 25px; background-color: #ecf0f1; border-radius: 12px; margin-bottom: 15px; }\n.progress-bar { height: 100%; background-color: #3498db; border-radius: 12px; display: flex; justify-content: center; align-items: center; color: white; font-weight: bold; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst BookClubApp = () => {\n  const [books, setBooks] = useState([\n    { title: 'The Great Gatsby', votes: 5 },\n    { title: '1984', votes: 3 },\n    { title: 'To Kill a Mockingbird', votes: 7 }\n  ]);\n  const [threads, setThreads] = useState([\n    { title: 'Chapter 1 Discussion', replies: 10 },\n    { title: 'Character Analysis', replies: 7 }\n  ]);\n  const [progress, setProgress] = useState(50);\n  const [groupProgress, setGroupProgress] = useState(70);\n\n  const voteBook = (index) => {\n    const updatedBooks = books.map((book, i) => \n      i === index ? { ...book, votes: book.votes + 1 } : book\n    );\n    setBooks(updatedBooks);\n  };\n\n  return (\n    <div className='container'>\n      <div className='book-selection'>\n        <h2>Vote for the Next Book</h2>\n        <div className='carousel'>\n          {books.map((book, index) => (\n            <div key={index} className='carousel-item'>\n              <h3>{book.title}</h3>\n              <p>{book.votes} votes</p>\n              <button onClick={() => voteBook(index)}>Vote</button>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className='discussions'>\n        <h2>Member Discussions</h2>\n        {threads.map((thread, index) => (\n          <div key={index} className='thread'>\n            <h4>{thread.title}</h4>\n            <p>{thread.replies} replies</p>\n          </div>\n        ))}\n      </div>\n      <div className='progress-tracker'>\n        <h2>Reading Progress</h2>\n        <p>Your Progress</p>\n        <div className='progress-bar-container'>\n          <div className='progress-bar' style={{ width: `${progress}%` }}>{progress}%</div>\n        </div>\n        <p>Group Progress</p>\n        <div className='progress-bar-container'>\n          <div className='progress-bar' style={{ width: `${groupProgress}%` }}>{groupProgress}%</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BookClubApp;"
    },
    {
        "problem_id": "000000107",
        "complexity_level": 2,
        "image": "imgs/000000107/000000107.png",
        "instruction_layout": "This page is designed as a modern, interactive event ticketing platform. It features a 'Featured Events' slider, a 'Ticket Purchase Form', and a 'Live Sales Dashboard'. Users can browse upcoming events through a sleek, interactive slider. The ticket purchase form allows users to select an event, choose the number of tickets, and enter payment details. The live sales dashboard displays the number of tickets sold, revenue generated, and a real-time update of available seats for each event. The system should allow users to track live data changes in the dashboard as tickets are purchased.",
        "instruction_requirement": "The system must provide an interactive and visually appealing event ticketing platform. Users can explore events using a slider, purchase tickets, and view live sales data. The form should update in real-time, reflecting any changes in available tickets. The design should be clean, modern, and engaging, with smooth transitions, animations, and vibrant colors. The live sales dashboard should have real-time updates to reflect ticket sales progress and revenue generation.",
        "style": "html {font-size: 16px; background-color: #f4f7f9; color: #2c3e50; font-family: 'Montserrat', sans-serif;}\n.container { display: grid; grid-template-columns: 1fr 2fr; grid-gap: 30px; padding: 30px; }\n.events-slider { grid-column: span 2; padding: 20px; background-color: #ffffff; border-radius: 12px; box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1); }\n.slider { display: flex; overflow-x: scroll; }\n.event-card { min-width: 250px; margin-right: 15px; background-color: #ecf0f1; border-radius: 10px; padding: 20px; text-align: center; transition: transform 0.3s; }\n.event-card:hover { transform: scale(1.05); }\n.purchase-form { padding: 20px; background-color: #ffffff; border-radius: 12px; box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1); }\n.form-group { margin-bottom: 15px; }\n.form-group label { font-size: 14px; color: #7f8c8d; }\n.form-group input, .form-group select { width: 100%; padding: 10px; border-radius: 8px; border: 1px solid #ccc; }\n.live-sales { padding: 20px; background-color: #f7f9fa; border-radius: 12px; box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1); text-align: center; }\n.sales-data { display: flex; justify-content: space-around; margin-top: 20px; }\n.sales-box { background-color: #ffffff; padding: 15px; border-radius: 8px; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); width: 30%; }\n.sales-box h3 { margin-bottom: 5px; color: #27ae60; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst TicketingPlatformApp = () => {\n  const [events, setEvents] = useState([\n    { name: 'Music Festival', date: '2024-06-15', price: 120, availableTickets: 50 },\n    { name: 'Tech Conference', date: '2024-07-10', price: 200, availableTickets: 30 },\n    { name: 'Art Exhibition', date: '2024-05-25', price: 50, availableTickets: 80 }\n  ]);\n  const [selectedEvent, setSelectedEvent] = useState(events[0].name);\n  const [tickets, setTickets] = useState(1);\n  const [revenue, setRevenue] = useState(0);\n  const [ticketsSold, setTicketsSold] = useState(0);\n\n  const purchaseTickets = () => {\n    const event = events.find((e) => e.name === selectedEvent);\n    const updatedEvents = events.map((e) =>\n      e.name === selectedEvent ? { ...e, availableTickets: e.availableTickets - tickets } : e\n    );\n    setEvents(updatedEvents);\n    setRevenue(revenue + tickets * event.price);\n    setTicketsSold(ticketsSold + tickets);\n  };\n\n  return (\n    <div className='container'>\n      <div className='events-slider'>\n        <h2>Featured Events</h2>\n        <div className='slider'>\n          {events.map((event, index) => (\n            <div key={index} className='event-card'>\n              <h3>{event.name}</h3>\n              <p>Date: {event.date}</p>\n              <p>Price: ${event.price}</p>\n              <p>Tickets Available: {event.availableTickets}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className='purchase-form'>\n        <h2>Purchase Tickets</h2>\n        <div className='form-group'>\n          <label>Event</label>\n          <select value={selectedEvent} onChange={(e) => setSelectedEvent(e.target.value)}>\n            {events.map((event, index) => (\n              <option key={index} value={event.name}>{event.name}</option>\n            ))}\n          </select>\n        </div>\n        <div className='form-group'>\n          <label>Number of Tickets</label>\n          <input type='number' value={tickets} onChange={(e) => setTickets(Number(e.target.value))} />\n        </div>\n        <button onClick={purchaseTickets}>Buy Tickets</button>\n      </div>\n      <div className='live-sales'>\n        <h2>Live Sales Dashboard</h2>\n        <div className='sales-data'>\n          <div className='sales-box'>\n            <h3>${revenue}</h3>\n            <p>Total Revenue</p>\n          </div>\n          <div className='sales-box'>\n            <h3>{ticketsSold}</h3>\n            <p>Tickets Sold</p>\n          </div>\n          <div className='sales-box'>\n            <h3>{events.reduce((acc, event) => acc + event.availableTickets, 0)}</h3>\n            <p>Tickets Available</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TicketingPlatformApp;"
    },
    {
        "problem_id": "000000108",
        "complexity_level": 2,
        "image": "imgs/000000108/000000108.png",
        "instruction_layout": "This page is designed as a modern 'Personal Wellness Dashboard' for tracking daily habits, mood, and fitness goals. It features a 'Daily Habit Tracker', a 'Mood Journal', and a 'Weekly Progress Chart'. The daily habit tracker allows users to check off completed habits such as 'Meditation', 'Exercise', or 'Water Intake'. The mood journal lets users log their emotions and write short reflections. The weekly progress chart visually displays the completion rate of habits and fitness goals over the past week, with motivational messages based on performance. The design should focus on a clean, positive, and encouraging aesthetic with smooth transitions and animations to provide a delightful user experience.",
        "instruction_requirement": "The platform must provide an engaging and visually modern experience for tracking daily habits, mood, and fitness goals. Users should be able to check off habits, log their mood, and see a summary of their weekly progress. The weekly progress chart should update dynamically, showing a clear representation of the user's performance. The layout should be clean and appealing, with vibrant colors, encouraging messages, and subtle animations that enhance the overall user experience. The page should also display motivational messages based on the user's weekly progress.",
        "style": "html {font-size: 16px; background-color: #f0f4f8; color: #2d3436; font-family: 'Nunito', sans-serif;}\n.container { display: grid; grid-template-columns: 1fr 2fr; grid-gap: 30px; padding: 40px; }\n.habit-tracker { background-color: #ffffff; border-radius: 12px; box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1); padding: 20px; }\n.habit-item { display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #ecf0f1; }\n.habit-item:last-child { border-bottom: none; }\n.mood-journal { background-color: #ffffff; border-radius: 12px; box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1); padding: 20px; }\n.mood-entry { margin-bottom: 15px; }\n.mood-entry input { width: 100%; padding: 10px; border-radius: 8px; border: 1px solid #ccc; }\n.progress-chart { background-color: #ffffff; border-radius: 12px; box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1); padding: 20px; text-align: center; }\n.progress-bar-container { width: 100%; height: 25px; background-color: #ecf0f1; border-radius: 12px; margin-bottom: 15px; }\n.progress-bar { height: 100%; background-color: #2ecc71; border-radius: 12px; display: flex; justify-content: center; align-items: center; color: white; font-weight: bold; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst WellnessDashboard = () => {\n  const [habits, setHabits] = useState([\n    { name: 'Meditation', completed: false },\n    { name: 'Exercise', completed: true },\n    { name: 'Water Intake', completed: false }\n  ]);\n  const [mood, setMood] = useState('Feeling good!');\n  const [progress, setProgress] = useState(75);\n\n  const toggleHabit = (index) => {\n    const updatedHabits = habits.map((habit, i) =>\n      i === index ? { ...habit, completed: !habit.completed } : habit\n    );\n    setHabits(updatedHabits);\n  };\n\n  const updateMood = (e) => {\n    setMood(e.target.value);\n  };\n\n  return (\n    <div className='container'>\n      <div className='habit-tracker'>\n        <h2>Daily Habit Tracker</h2>\n        {habits.map((habit, index) => (\n          <div key={index} className='habit-item'>\n            <span>{habit.name}</span>\n            <input type='checkbox' checked={habit.completed} onChange={() => toggleHabit(index)} />\n          </div>\n        ))}\n      </div>\n      <div className='mood-journal'>\n        <h2>Mood Journal</h2>\n        <div className='mood-entry'>\n          <input type='text' value={mood} onChange={updateMood} placeholder='How are you feeling today?' />\n        </div>\n      </div>\n      <div className='progress-chart'>\n        <h2>Weekly Progress</h2>\n        <div className='progress-bar-container'>\n          <div className='progress-bar' style={{ width: `${progress}%` }}>{progress}%</div>\n        </div>\n        <p>{progress >= 80 ? 'Great job! Keep it up!' : 'Keep pushing, you can do better!'}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default WellnessDashboard;"
    },
    {
        "problem_id": "000000109",
        "complexity_level": 2,
        "image": "imgs/000000109/000000109.png",
        "instruction_layout": "This page is designed as a 'Luxury Travel Booking Platform'. It features a 'Destination Showcase', an interactive 'Booking Form', and a 'Real-time Availability Dashboard'. Users can browse luxury travel destinations through an elegant, visually rich showcase section, select their preferred destination, and use a custom booking form with date pickers, number of guests, and room preferences. The real-time availability dashboard updates as bookings are made and displays available rooms, special offers, and live feedback. The design should focus on a sophisticated, upscale look with smooth animations, sleek typography, and a rich color palette.",
        "instruction_requirement": "The platform must provide an immersive luxury booking experience with a high-end design and interactive elements. Users should be able to browse destinations with an elegant showcase, book trips with a modern, multi-step form, and see real-time updates of available rooms. The dashboard should offer live data updates and highlight premium packages or special offers. The design should use subtle animations, dark themes, gold accents, and refined fonts to enhance the luxurious feel.",
        "style": "html {font-size: 16px; background-color: #1c1c1c; color: #f0e5c9; font-family: 'Lora', serif;}\n.container { display: grid; grid-template-columns: 2fr 1fr; grid-gap: 40px; padding: 40px; }\n.destination-showcase { grid-column: span 2; padding: 30px; background-color: #2e2e2e; border-radius: 12px; box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2); }\n.showcase-item { margin-bottom: 20px; background-color: #383838; padding: 20px; border-radius: 12px; transition: transform 0.3s ease; }\n.showcase-item:hover { transform: scale(1.05); }\n.booking-form { padding: 30px; background-color: #2e2e2e; border-radius: 12px; box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2); }\n.form-group { margin-bottom: 15px; }\n.form-group label { font-size: 14px; color: #c8b694; }\n.form-group input, .form-group select { width: 100%; padding: 10px; border-radius: 8px; border: 1px solid #444; background-color: #3e3e3e; color: #fff; }\n.availability-dashboard { padding: 30px; background-color: #2e2e2e; border-radius: 12px; box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2); text-align: center; }\n.availability-item { background-color: #383838; padding: 15px; border-radius: 10px; margin-bottom: 10px; }\n.availability-item h4 { color: #f1c40f; }",
        "file_type": "js",
        "component": "import React, { useState } from 'react';\n\nconst LuxuryTravelApp = () => {\n  const [destinations, setDestinations] = useState([\n    { name: 'Maldives', roomsAvailable: 5 },\n    { name: 'Bora Bora', roomsAvailable: 3 },\n    { name: 'Santorini', roomsAvailable: 7 }\n  ]);\n  const [selectedDestination, setSelectedDestination] = useState('Maldives');\n  const [guests, setGuests] = useState(2);\n  const [checkIn, setCheckIn] = useState('2024-05-01');\n  const [checkOut, setCheckOut] = useState('2024-05-07');\n  const [availableRooms, setAvailableRooms] = useState(5);\n  const [specialOffers, setSpecialOffers] = useState(['Complimentary Spa', 'Private Yacht Tour']);\n\n  const handleBooking = () => {\n    const updatedDestinations = destinations.map(destination =>\n      destination.name === selectedDestination ? { ...destination, roomsAvailable: destination.roomsAvailable - 1 } : destination\n    );\n    setDestinations(updatedDestinations);\n    setAvailableRooms(updatedDestinations.find(d => d.name === selectedDestination).roomsAvailable);\n  };\n\n  return (\n    <div className='container'>\n      <div className='destination-showcase'>\n        <h2>Luxury Destinations</h2>\n        {destinations.map((destination, index) => (\n          <div key={index} className='showcase-item'>\n            <h3>{destination.name}</h3>\n            <p>Rooms Available: {destination.roomsAvailable}</p>\n          </div>\n        ))}\n      </div>\n      <div className='booking-form'>\n        <h2>Book Your Stay</h2>\n        <div className='form-group'>\n          <label>Destination</label>\n          <select value={selectedDestination} onChange={(e) => setSelectedDestination(e.target.value)}>\n            {destinations.map((destination, index) => (\n              <option key={index} value={destination.name}>{destination.name}</option>\n            ))}\n          </select>\n        </div>\n        <div className='form-group'>\n          <label>Check-in Date</label>\n          <input type='date' value={checkIn} onChange={(e) => setCheckIn(e.target.value)} />\n        </div>\n        <div className='form-group'>\n          <label>Check-out Date</label>\n          <input type='date' value={checkOut} onChange={(e) => setCheckOut(e.target.value)} />\n        </div>\n        <div className='form-group'>\n          <label>Number of Guests</label>\n          <input type='number' value={guests} onChange={(e) => setGuests(Number(e.target.value))} />\n        </div>\n        <button onClick={handleBooking}>Confirm Booking</button>\n      </div>\n      <div className='availability-dashboard'>\n        <h2>Real-Time Availability</h2>\n        <div className='availability-item'>\n          <h4>Rooms Left: {availableRooms}</h4>\n        </div>\n        <div className='availability-item'>\n          <h4>Special Offers</h4>\n          <ul>\n            {specialOffers.map((offer, index) => <li key={index}>{offer}</li>)}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LuxuryTravelApp;"
    }
]